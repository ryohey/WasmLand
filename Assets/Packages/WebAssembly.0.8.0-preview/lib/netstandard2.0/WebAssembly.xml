<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WebAssembly</name>
    </assembly>
    <members>
        <member name="T:WebAssembly.BlockType">
            <summary>
            Types for use as block signatures.
            </summary>
        </member>
        <member name="F:WebAssembly.BlockType.Int32">
            <summary>
            32-bit integer value-type, equivalent to .NET's <see cref="T:System.Int32"/> and <see cref="T:System.UInt32"/>.
            </summary>
        </member>
        <member name="F:WebAssembly.BlockType.Int64">
            <summary>
            64-bit integer value-type, equivalent to .NET's <see cref="T:System.Int64"/> and <see cref="T:System.UInt64"/>.
            </summary>
        </member>
        <member name="F:WebAssembly.BlockType.Float32">
            <summary>
            32-bit floating point value-type, equivalent to .NET's <see cref="T:System.Single"/>.
            </summary>
        </member>
        <member name="F:WebAssembly.BlockType.Float64">
            <summary>
            64-bit floating point value-type, equivalent to .NET's <see cref="T:System.Double"/>.
            </summary>
        </member>
        <member name="F:WebAssembly.BlockType.Empty">
            <summary>
            Pseudo type for representing an empty block type.
            </summary>
        </member>
        <member name="T:WebAssembly.CustomSection">
            <summary>
            Contains arbitrary bytes that may have meaning in certain environments.
            </summary>
        </member>
        <member name="M:WebAssembly.CustomSection.#ctor">
            <summary>
            Creates a new custom section.
            </summary>
        </member>
        <member name="P:WebAssembly.CustomSection.PrecedingSection">
            <summary>
            This custom section is to be written after the indicated preceding section.  Defaults to <see cref="F:WebAssembly.Section.None"/>, causing it to be in front of all other sections.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Value must be one of the <see cref="T:WebAssembly.Section"/> values.</exception>
        </member>
        <member name="P:WebAssembly.CustomSection.Name">
            <summary>
            The name of the custom section; nulls are converted to <see cref="F:System.String.Empty"/>.
            </summary>
        </member>
        <member name="P:WebAssembly.CustomSection.Content">
            <summary>
            The content of the custom section; nulls are converted to an empty modifiable collection.
            </summary>
        </member>
        <member name="T:WebAssembly.Data">
            <summary>
            The data section declares the initialized data that is loaded into the linear memory.
            </summary>
        </member>
        <member name="P:WebAssembly.Data.Index">
            <summary>
            The linear memory index (always 0 in the initial version of WebAssembly).
            </summary>
        </member>
        <member name="P:WebAssembly.Data.InitializerExpression">
            <summary>
            An <see cref="F:WebAssembly.WebAssemblyValueType.Int32"/> initializer expression that computes the offset at which to place the data.
            </summary>
            <exception cref="T:System.ArgumentNullException">Value cannot be set to null.</exception>
        </member>
        <member name="P:WebAssembly.Data.RawData">
            <summary>
            Raw data in byte form.
            </summary>
            <exception cref="T:System.ArgumentNullException">Value cannot be set to null.</exception>
        </member>
        <member name="M:WebAssembly.Data.#ctor">
            <summary>
            Creates a new <see cref="T:WebAssembly.Data"/> instance.
            </summary>
        </member>
        <member name="M:WebAssembly.Data.ToString">
            <summary>
            Expresses the value of this instance as a string.
            </summary>
            <returns>A string representation of this instance.</returns>
        </member>
        <member name="T:WebAssembly.Element">
            <summary>
            The elements section allows a module to initialize (at instantiation time) the elements of any imported or internally-defined table with any other definition in the module.
            </summary>
        </member>
        <member name="P:WebAssembly.Element.Index">
            <summary>
            The table index.
            </summary>
        </member>
        <member name="P:WebAssembly.Element.InitializerExpression">
            <summary>
            An initializer expression that computes the offset at which to place the elements.
            </summary>
            <exception cref="T:System.ArgumentNullException">Value cannot be set to null.</exception>
        </member>
        <member name="P:WebAssembly.Element.Elements">
            <summary>
            A sequence of function indices.
            </summary>
            <exception cref="T:System.ArgumentNullException">Value cannot be set to null.</exception>
        </member>
        <member name="M:WebAssembly.Element.#ctor">
            <summary>
            Creates a new <see cref="T:WebAssembly.Element"/> instance.
            </summary>
        </member>
        <member name="M:WebAssembly.Element.ToString">
            <summary>
            Expresses the value of this instance as a string.
            </summary>
            <returns>A string representation of this instance.</returns>
        </member>
        <member name="T:WebAssembly.ElementType">
            <summary>
            The types of elements in a table.
            </summary>
        </member>
        <member name="F:WebAssembly.ElementType.FunctionReference">
            <summary>
            A function with any signature.
            </summary>
        </member>
        <member name="T:WebAssembly.Export">
            <summary>
            Makes a WebAssembly feature accessible to the host environment.
            </summary>
        </member>
        <member name="P:WebAssembly.Export.Name">
            <summary>
            The name of the exported item.
            </summary>
            <exception cref="T:System.ArgumentNullException">Value cannot be set to null.</exception>
        </member>
        <member name="P:WebAssembly.Export.Kind">
            <summary>
            The kind of definition being exported.
            </summary>
        </member>
        <member name="P:WebAssembly.Export.Index">
            <summary>
            The index into the corresponding index space.
            </summary>
        </member>
        <member name="M:WebAssembly.Export.#ctor">
            <summary>
            Creates a new <see cref="T:WebAssembly.Export"/>  instance.
            </summary>
        </member>
        <member name="M:WebAssembly.Export.#ctor(WebAssembly.Reader)">
            <summary>
            Creates a new <see cref="T:WebAssembly.Export"/> instance from the provided <see cref="T:WebAssembly.Reader"/>.
            </summary>
            <param name="reader">Provides raw data.</param>
        </member>
        <member name="M:WebAssembly.Export.ToString">
            <summary>
            Expresses the value of this instance as a string.
            </summary>
            <returns>A string representation of this instance.</returns>
        </member>
        <member name="T:WebAssembly.ExternalKind">
            <summary>
            A single-byte unsigned integer indicating the kind of definition being imported or defined.
            </summary>
        </member>
        <member name="F:WebAssembly.ExternalKind.Function">
            <summary>
            A function import or definition.
            </summary>
        </member>
        <member name="F:WebAssembly.ExternalKind.Table">
            <summary>
            A table import or definition.
            </summary>
        </member>
        <member name="F:WebAssembly.ExternalKind.Memory">
            <summary>
            A memory import or definition.
            </summary>
        </member>
        <member name="F:WebAssembly.ExternalKind.Global">
            <summary>
            A global import or definition.
            </summary>
        </member>
        <member name="T:WebAssembly.Function">
            <summary>
            Describes a function.
            </summary>
        </member>
        <member name="P:WebAssembly.Function.Type">
            <summary>
            The index to the <see cref="P:WebAssembly.Module.Types"/> entry that describes the function signature.
            </summary>
        </member>
        <member name="M:WebAssembly.Function.#ctor">
            <summary>
            Creates a new <see cref="T:WebAssembly.Function"/> instance.
            </summary>
        </member>
        <member name="M:WebAssembly.Function.#ctor(System.UInt32)">
            <summary>
            Creates a new <see cref="T:WebAssembly.Function"/> instance with the provided type index.
            </summary>
            <param name="type">The index to the <see cref="P:WebAssembly.Module.Types"/> entry that describes the function signature.</param>
        </member>
        <member name="M:WebAssembly.Function.ToString">
            <summary>
            Expresses the value of this instance as a string.
            </summary>
            <returns>A string representation of this instance.</returns>
        </member>
        <member name="T:WebAssembly.FunctionBody">
            <summary>
            Function bodies consist of a sequence of local variable declarations followed by bytecode instructions.
            </summary>
        </member>
        <member name="P:WebAssembly.FunctionBody.Locals">
            <summary>
            Local variables.
            </summary>
            <exception cref="T:System.ArgumentNullException">Value cannot be set to null.</exception>
        </member>
        <member name="P:WebAssembly.FunctionBody.Code">
            <summary>
            Bytecode of the function.
            </summary>
            <exception cref="T:System.ArgumentNullException">Value cannot be set to null.</exception>
        </member>
        <member name="M:WebAssembly.FunctionBody.#ctor">
            <summary>
            Creates a new instance of <see cref="T:WebAssembly.FunctionBody"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.FunctionBody.ToString">
            <summary>
            Expresses the value of this instance as a string.
            </summary>
            <returns>A string representation of this instance.</returns>
        </member>
        <member name="M:WebAssembly.FunctionBody.GetHashCode">
            <summary>
            Returns a hash code based on the value of this instance.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:WebAssembly.FunctionBody.Equals(System.Object)">
            <summary>
            Determines whether this instance is identical to another.
            </summary>
            <param name="obj">The object instance to compare against.</param>
            <returns>True if they have the same type and value, otherwise false.</returns>
        </member>
        <member name="M:WebAssembly.FunctionBody.Equals(WebAssembly.FunctionBody)">
            <summary>
            Determines whether this instance is identical to another.
            </summary>
            <param name="other">The instance to compare against.</param>
            <returns>True if they have the same type and value, otherwise false.</returns>
        </member>
        <member name="T:WebAssembly.FunctionType">
            <summary>
            Applied to <see cref="T:WebAssembly.WebAssemblyType"/> to indicate the type of function.
            </summary>
        </member>
        <member name="F:WebAssembly.FunctionType.Function">
            <summary>
            A function.
            </summary>
        </member>
        <member name="T:WebAssembly.Global">
            <summary>
            Describes a global variable.
            </summary>
        </member>
        <member name="P:WebAssembly.Global.ContentType">
            <summary>
            Type of the value.
            </summary>
        </member>
        <member name="P:WebAssembly.Global.IsMutable">
            <summary>
            When true, the value can be changed by running code.
            </summary>
        </member>
        <member name="P:WebAssembly.Global.InitializerExpression">
            <summary>
            The initial value of the global.
            </summary>
            <exception cref="T:System.ArgumentNullException">Value cannot be set to null.</exception>
        </member>
        <member name="M:WebAssembly.Global.#ctor">
            <summary>
            Creates a new <see cref="T:WebAssembly.Global"/> instance.
            </summary>
        </member>
        <member name="T:WebAssembly.Import">
            <summary>
            Describes external features made available to the web assembly.
            </summary>
        </member>
        <member name="P:WebAssembly.Import.Module">
            <summary>
            The module portion of the name.
            </summary>
            <exception cref="T:System.ArgumentNullException">Value cannot be set to null.</exception>
        </member>
        <member name="P:WebAssembly.Import.Field">
            <summary>
            The field portion of the name.
            </summary>
            <exception cref="T:System.ArgumentNullException">Value cannot be set to null.</exception>
        </member>
        <member name="P:WebAssembly.Import.Kind">
            <summary>
            The type of import.
            </summary>
        </member>
        <member name="M:WebAssembly.Import.#ctor">
            <summary>
            Creates a new <see cref="T:WebAssembly.Import"/> instance.
            </summary>
        </member>
        <member name="M:WebAssembly.Import.ToString">
            <summary>
            Expresses the value of this instance as a string.
            </summary>
            <returns>A string representation of this instance.</returns>
        </member>
        <member name="M:WebAssembly.Import.ParseFrom(WebAssembly.Reader)">
            <summary>
            Creates an <see cref="T:WebAssembly.Import"/> instance from the provided <see cref="T:WebAssembly.Reader"/>.
            </summary>
            <param name="reader">Provides raw data.</param>
            <returns>The parsed <see cref="T:WebAssembly.Import"/>.</returns>
            <exception cref="T:WebAssembly.ModuleLoadException">Imported external kind is not recognized or not supported.</exception>
        </member>
        <member name="T:WebAssembly.Import.Function">
            <summary>
            Describes an imported function.
            </summary>
        </member>
        <member name="P:WebAssembly.Import.Function.Kind">
            <summary>
            Always <see cref="F:WebAssembly.ExternalKind.Function"/>.
            </summary>
        </member>
        <member name="P:WebAssembly.Import.Function.TypeIndex">
            <summary>
            The index within the module's types that describes the function signature.
            </summary>
        </member>
        <member name="M:WebAssembly.Import.Function.#ctor">
            <summary>
            Creates a new <see cref="T:WebAssembly.Import.Function"/> instance.
            </summary>
        </member>
        <member name="M:WebAssembly.Import.Function.ToString">
            <summary>
            Expresses the value of this instance as a string.
            </summary>
            <returns>A string representation of this instance.</returns>
        </member>
        <member name="T:WebAssembly.Import.Table">
            <summary>
            Describes an imported table.
            </summary>
        </member>
        <member name="P:WebAssembly.Import.Table.Kind">
            <summary>
            Always <see cref="F:WebAssembly.ExternalKind.Table"/>.
            </summary>
        </member>
        <member name="P:WebAssembly.Import.Table.Definition">
            <summary>
            Definiton of the imported table.
            </summary>
        </member>
        <member name="M:WebAssembly.Import.Table.#ctor">
            <summary>
            Creates a new <see cref="T:WebAssembly.Import.Table"/> instance.
            </summary>
        </member>
        <member name="M:WebAssembly.Import.Table.ToString">
            <summary>
            Expresses the value of this instance as a string.
            </summary>
            <returns>A string representation of this instance.</returns>
        </member>
        <member name="T:WebAssembly.Import.Memory">
            <summary>
            Describes an imported memory.
            </summary>
        </member>
        <member name="P:WebAssembly.Import.Memory.Kind">
            <summary>
            Always <see cref="F:WebAssembly.ExternalKind.Memory"/>.
            </summary>
        </member>
        <member name="P:WebAssembly.Import.Memory.Type">
            <summary>
            Type of the imported memory.
            </summary>
        </member>
        <member name="M:WebAssembly.Import.Memory.#ctor">
            <summary>
            Creates a new <see cref="T:WebAssembly.Import.Memory"/> instance.
            </summary>
        </member>
        <member name="M:WebAssembly.Import.Memory.ToString">
            <summary>
            Expresses the value of this instance as a string.
            </summary>
            <returns>A string representation of this instance.</returns>
        </member>
        <member name="T:WebAssembly.Import.Global">
            <summary>
            Describes an imported global.
            </summary>
        </member>
        <member name="P:WebAssembly.Import.Global.Kind">
            <summary>
            Always <see cref="F:WebAssembly.ExternalKind.Global"/>.
            </summary>
        </member>
        <member name="P:WebAssembly.Import.Global.ContentType">
            <summary>
            Type of the value.
            </summary>
        </member>
        <member name="P:WebAssembly.Import.Global.IsMutable">
            <summary>
            When true, the value can be changed by running code.
            </summary>
        </member>
        <member name="M:WebAssembly.Import.Global.#ctor">
            <summary>
            Creates a new <see cref="T:WebAssembly.Import.Global"/> instance.
            </summary>
        </member>
        <member name="M:WebAssembly.Import.Global.ToString">
            <summary>
            Expresses the value of this instance as a string.
            </summary>
            <returns>A string representation of this instance.</returns>
        </member>
        <member name="T:WebAssembly.Instance`1">
            <summary>
            A compiled WebAssembly instance.
            </summary>
        </member>
        <member name="M:WebAssembly.Instance`1.#ctor(`0)">
            <summary>
            This is used by compiled WebAssembly files and should not be used by any other code.
            </summary>
        </member>
        <member name="P:WebAssembly.Instance`1.Exports">
            <summary>
            Exported features of the assembly.
            </summary>
        </member>
        <member name="M:WebAssembly.Instance`1.Dispose(System.Boolean)">
            <summary>
            Frees managed and unmanaged resources associated with this instance.
            </summary>
            <param name="disposing">When true, the caller is a <see cref="M:System.IDisposable.Dispose"/> method, if false, a finalizer.</param>
        </member>
        <member name="M:WebAssembly.Instance`1.Dispose">
            <summary>
            Releases unmanaged resources associated with this instance.
            </summary>
        </member>
        <member name="T:WebAssembly.Instruction">
            <summary>
            A combination of <see cref="P:WebAssembly.Instruction.OpCode"/> and its associated parameters.
            </summary>
        </member>
        <member name="M:WebAssembly.Instruction.#ctor">
            <summary>
            Creates a new <see cref="T:WebAssembly.Instruction"/> instance.
            </summary>
        </member>
        <member name="P:WebAssembly.Instruction.OpCode">
            <summary>
            Gets the <see cref="P:WebAssembly.Instruction.OpCode"/> associated with this instruction.
            </summary>
        </member>
        <member name="M:WebAssembly.Instruction.Equals(WebAssembly.Instruction)">
            <summary>
            Determines whether this instruction is identical to another.
            </summary>
            <param name="other">The instruction to compare against.</param>
            <returns>True if they have the same type and value, otherwise false.</returns>
        </member>
        <member name="M:WebAssembly.Instruction.Equals(System.Object)">
            <summary>
            Determines whether this instruction is identical to another.
            </summary>
            <param name="obj">The object instance to compare against.</param>
            <returns>True if they have the same type and value, otherwise false.</returns>
        </member>
        <member name="M:WebAssembly.Instruction.GetHashCode">
            <summary>
            Returns a simple hash code based on the value of the instruction.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:WebAssembly.Instruction.ParseInitializerExpression(WebAssembly.Reader)">
            <summary>
            Parses an instruction stream restricted to the opcodes available for an initializer expression.
            </summary>
            <param name="reader">The source of binary data.</param>
            <returns>Parsed instructions.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="reader"/> cannot be null.</exception>
        </member>
        <member name="M:WebAssembly.Instruction.Parse(WebAssembly.Reader)">
            <summary>
            Parses an instruction stream.
            </summary>
            <param name="reader">The source of binary data.</param>
            <returns>Parsed instructions.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="reader"/> cannot be null.</exception>
        </member>
        <member name="T:WebAssembly.Instructions.Block">
            <summary>
            The beginning of a block construct, a sequence of instructions with a label at the end.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Block.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.Block"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Block.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.Block"/> instance.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Block.#ctor(WebAssembly.BlockType)">
            <summary>
            Creates a new <see cref="T:WebAssembly.Instructions.Block"/> of the provided type.
            </summary>
            <param name="type">Becomes the block's <see cref="P:WebAssembly.Instructions.BlockTypeInstruction.Type"/>.</param>
        </member>
        <member name="T:WebAssembly.Instructions.BlockTypeInstruction">
            <summary>
            Supports instructions that use the "block_type" data fields from the binary encoding specification.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.BlockTypeInstruction.Type">
            <summary>
            The type of value on the stack when the block exits, or <see cref="F:WebAssembly.BlockType.Empty"/> if none.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.BlockTypeInstruction.#ctor">
            <summary>
            Creates a new <see cref="T:WebAssembly.BlockType"/> instance.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.BlockTypeInstruction.#ctor(WebAssembly.Reader)">
            <summary>
            Creates a new <see cref="T:WebAssembly.BlockType"/> instance from the provided data stream.
            </summary>
            <param name="reader">Reads the bytes of a web assembly binary file.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="reader"/> cannot be null.</exception>
        </member>
        <member name="M:WebAssembly.Instructions.BlockTypeInstruction.Equals(WebAssembly.Instruction)">
            <summary>
            Determines whether this instruction is identical to another.
            </summary>
            <param name="other">The instruction to compare against.</param>
            <returns>True if they have the same type and value, otherwise false.</returns>
        </member>
        <member name="M:WebAssembly.Instructions.BlockTypeInstruction.GetHashCode">
            <summary>
            Returns a simple hash code based on the value of the instruction.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="T:WebAssembly.Instructions.Branch">
            <summary>
            Branch to a given label in an enclosing construct.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Branch.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.Branch"/>.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Branch.Index">
            <summary>
            The number of ancestor blocks to climb; 0 is the immediate parent.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Branch.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.Branch"/> instance.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Branch.#ctor(System.UInt32)">
            <summary>
            Creates a new <see cref="T:WebAssembly.Instructions.Branch"/> instance with the provided index.
            </summary>
            <param name="index">The number of ancestor blocks to climb; 0 is the immediate parent.</param>
        </member>
        <member name="M:WebAssembly.Instructions.Branch.Equals(WebAssembly.Instruction)">
            <summary>
            Determines whether this instruction is identical to another.
            </summary>
            <param name="other">The instruction to compare against.</param>
            <returns>True if they have the same type and value, otherwise false.</returns>
        </member>
        <member name="M:WebAssembly.Instructions.Branch.GetHashCode">
            <summary>
            Returns a simple hash code based on the value of the instruction.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="T:WebAssembly.Instructions.BranchIf">
            <summary>
            Conditionally branch to a given label in an enclosing construct.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.BranchIf.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.BranchIf"/>.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.BranchIf.Index">
            <summary>
            The number of ancestor blocks to climb; 0 is the immediate parent.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.BranchIf.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.BranchIf"/> instance.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.BranchIf.#ctor(System.UInt32)">
            <summary>
            Creates a new <see cref="T:WebAssembly.Instructions.BranchIf"/> instance with the provided index.
            </summary>
            <param name="index">The number of ancestor blocks to climb; 0 is the immediate parent.</param>
        </member>
        <member name="M:WebAssembly.Instructions.BranchIf.Equals(WebAssembly.Instruction)">
            <summary>
            Determines whether this instruction is identical to another.
            </summary>
            <param name="other">The instruction to compare against.</param>
            <returns>True if they have the same type and value, otherwise false.</returns>
        </member>
        <member name="M:WebAssembly.Instructions.BranchIf.GetHashCode">
            <summary>
            Returns a simple hash code based on the value of the instruction.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="T:WebAssembly.Instructions.BranchTable">
            <summary>
            A jump table which jumps to a label in an enclosing construct.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.BranchTable.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.BranchTable"/>.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.BranchTable.Labels">
            <summary>
            A zero-based array of labels.
            </summary>
            <exception cref="T:System.ArgumentNullException">Value cannot be set to null.</exception>
        </member>
        <member name="P:WebAssembly.Instructions.BranchTable.DefaultLabel">
            <summary>
            The default label if the jump is out of bounds.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.BranchTable.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.BranchTable"/> instance.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.BranchTable.#ctor(System.UInt32,System.UInt32[])">
            <summary>
            Creates a new <see cref="T:WebAssembly.Instructions.BranchTable"/> instance with the provided properties.
            </summary>
            <param name="defaultLabel">The default label if the jump is out of bounds.</param>
            <param name="labels">A zero-based array of labels.</param>
        </member>
        <member name="M:WebAssembly.Instructions.BranchTable.#ctor(System.UInt32,System.Collections.Generic.IList{System.UInt32})">
            <summary>
            Creates a new <see cref="T:WebAssembly.Instructions.BranchTable"/> instance with the provided properties.
            </summary>
            <param name="defaultLabel">The default label if the jump is out of bounds.</param>
            <param name="labels">A zero-based array of labels.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="labels"/> cannot be to null.</exception>
        </member>
        <member name="M:WebAssembly.Instructions.BranchTable.Equals(WebAssembly.Instruction)">
            <summary>
            Determines whether this instruction is identical to another.
            </summary>
            <param name="other">The instruction to compare against.</param>
            <returns>True if they have the same type and value, otherwise false.</returns>
        </member>
        <member name="M:WebAssembly.Instructions.BranchTable.Equals(WebAssembly.Instructions.BranchTable)">
            <summary>
            Determines whether this instruction is identical to another.
            </summary>
            <param name="other">The instruction to compare against.</param>
            <returns>True if they have the same type and value, otherwise false.</returns>
        </member>
        <member name="M:WebAssembly.Instructions.BranchTable.GetHashCode">
            <summary>
            Returns a simple hash code based on the value of the instruction.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="T:WebAssembly.Instructions.Call">
            <summary>
            Call function directly.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Call.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.Call"/>.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Call.Index">
            <summary>
            The location within the function index to call.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Call.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.Call"/> instance.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Call.#ctor(System.UInt32)">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.Call"/> instance to invoke the function at the specified index.
            </summary>
            <param name="index">The location within the function index to call.</param>
        </member>
        <member name="M:WebAssembly.Instructions.Call.Equals(WebAssembly.Instruction)">
            <summary>
            Determines whether this instruction is identical to another.
            </summary>
            <param name="other">The instruction to compare against.</param>
            <returns>True if they have the same type and value, otherwise false.</returns>
        </member>
        <member name="M:WebAssembly.Instructions.Call.Equals(WebAssembly.Instructions.Call)">
            <summary>
            Determines whether this instruction is identical to another.
            </summary>
            <param name="other">The instruction to compare against.</param>
            <returns>True if they have the same type and value, otherwise false.</returns>
        </member>
        <member name="M:WebAssembly.Instructions.Call.GetHashCode">
            <summary>
            Returns a simple hash code based on the value of the instruction.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="T:WebAssembly.Instructions.CallIndirect">
            <summary>
            Call function indirectly.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.CallIndirect.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.CallIndirect"/>.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.CallIndirect.Type">
            <summary>
            The index of the type representing the function signature.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.CallIndirect.Reserved">
            <summary>
            Reserved for future use.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.CallIndirect.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.CallIndirect"/> instance.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.CallIndirect.#ctor(System.UInt32)">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.CallIndirect"/> instance.
            </summary>
            <param name="type">The index of the type representing the function signature.</param>
        </member>
        <member name="M:WebAssembly.Instructions.CallIndirect.Equals(WebAssembly.Instruction)">
            <summary>
            Determines whether this instruction is identical to another.
            </summary>
            <param name="other">The instruction to compare against.</param>
            <returns>True if they have the same type and value, otherwise false.</returns>
        </member>
        <member name="M:WebAssembly.Instructions.CallIndirect.Equals(WebAssembly.Instructions.CallIndirect)">
            <summary>
            Determines whether this instruction is identical to another.
            </summary>
            <param name="other">The instruction to compare against.</param>
            <returns>True if they have the same type and value, otherwise false.</returns>
        </member>
        <member name="M:WebAssembly.Instructions.CallIndirect.GetHashCode">
            <summary>
            Returns a simple hash code based on the value of the instruction.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="T:WebAssembly.Instructions.Drop">
            <summary>
            A unary operator that discards the value of its operand.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Drop.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.Drop"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Drop.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.Drop"/> instance.
            </summary>
        </member>
        <member name="T:WebAssembly.Instructions.Else">
            <summary>
            Marks the else block of an <see cref="T:WebAssembly.Instructions.If"/>.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Else.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.Else"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Else.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.Else"/> instance.
            </summary>
        </member>
        <member name="T:WebAssembly.Instructions.End">
            <summary>
            An instruction that marks the end of a block, loop, if, or function.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.End.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.End"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.End.#ctor">
            <summary>
            Creates a new <see cref="T:WebAssembly.Instructions.End"/> instance.
            </summary>
        </member>
        <member name="T:WebAssembly.Instructions.Float32Absolute">
            <summary>
            Absolute value.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Float32Absolute.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.Float32Absolute"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Float32Absolute.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.Float32Absolute"/> instance.
            </summary>
        </member>
        <member name="T:WebAssembly.Instructions.Float32Add">
            <summary>
            Addition.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Float32Add.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.Float32Add"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Float32Add.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.Float32Add"/> instance.
            </summary>
        </member>
        <member name="T:WebAssembly.Instructions.Float32Ceiling">
            <summary>
            Ceiling operator.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Float32Ceiling.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.Float32Ceiling"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Float32Ceiling.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.Float32Ceiling"/> instance.
            </summary>
        </member>
        <member name="T:WebAssembly.Instructions.Float32Constant">
            <summary>
            Produce the value of an f32 immediate.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Float32Constant.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.Float32Constant"/>.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Float32Constant.Value">
            <summary>
            Gets or sets the value of the constant.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Float32Constant.#ctor">
            <summary>
            Creates a new <see cref="T:WebAssembly.Instructions.Float32Constant"/> instance.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Float32Constant.#ctor(System.Single)">
            <summary>
            Creates a new <see cref="T:WebAssembly.Instructions.Float32Constant"/> instance with the provided value.
            </summary>
            <param name="value">The value of the constant.  This is passed to the <see cref="P:WebAssembly.Instructions.Float32Constant.Value"/> property.</param>
        </member>
        <member name="M:WebAssembly.Instructions.Float32Constant.#ctor(WebAssembly.Reader)">
            <summary>
            Creates a new <see cref="T:WebAssembly.Instructions.Float32Constant"/> instance from binary data.
            </summary>
            <param name="reader">The source of binary data.</param>
        </member>
        <member name="M:WebAssembly.Instructions.Float32Constant.Equals(WebAssembly.Instruction)">
            <summary>
            Determines whether this instruction is identical to another.
            </summary>
            <param name="other">The instruction to compare against.</param>
            <returns>True if they have the same type and value, otherwise false.</returns>
        </member>
        <member name="M:WebAssembly.Instructions.Float32Constant.GetHashCode">
            <summary>
            Returns a simple hash code based on the value of the instruction.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="T:WebAssembly.Instructions.Float32ConvertInt32Signed">
            <summary>
            Convert a signed 32-bit integer to a 32-bit float.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Float32ConvertInt32Signed.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.Float32ConvertInt32Signed"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Float32ConvertInt32Signed.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.Float32ConvertInt32Signed"/> instance.
            </summary>
        </member>
        <member name="T:WebAssembly.Instructions.Float32ConvertInt32Unsigned">
            <summary>
            Convert an unsigned 32-bit integer to a 32-bit float.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Float32ConvertInt32Unsigned.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.Float32ConvertInt32Unsigned"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Float32ConvertInt32Unsigned.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.Float32ConvertInt32Unsigned"/> instance.
            </summary>
        </member>
        <member name="T:WebAssembly.Instructions.Float32ConvertInt64Signed">
            <summary>
            Convert a signed 64-bit integer to a 32-bit float.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Float32ConvertInt64Signed.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.Float32ConvertInt64Signed"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Float32ConvertInt64Signed.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.Float32ConvertInt64Signed"/> instance.
            </summary>
        </member>
        <member name="T:WebAssembly.Instructions.Float32ConvertInt64Unsigned">
            <summary>
            Convert an unsigned 64-bit integer to a 32-bit float.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Float32ConvertInt64Unsigned.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.Float32ConvertInt64Unsigned"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Float32ConvertInt64Unsigned.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.Float32ConvertInt64Unsigned"/> instance.
            </summary>
        </member>
        <member name="T:WebAssembly.Instructions.Float32CopySign">
            <summary>
            Copysign.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Float32CopySign.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.Float32CopySign"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Float32CopySign.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.Float32CopySign"/> instance.
            </summary>
        </member>
        <member name="T:WebAssembly.Instructions.Float32DemoteFloat64">
            <summary>
            Demote a 64-bit float to a 32-bit float.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Float32DemoteFloat64.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.Float32DemoteFloat64"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Float32DemoteFloat64.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.Float32DemoteFloat64"/> instance.
            </summary>
        </member>
        <member name="T:WebAssembly.Instructions.Float32Divide">
            <summary>
            Division.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Float32Divide.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.Float32Divide"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Float32Divide.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.Float32Divide"/> instance.
            </summary>
        </member>
        <member name="T:WebAssembly.Instructions.Float32Equal">
            <summary>
            Compare ordered and equal.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Float32Equal.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.Float32Equal"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Float32Equal.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.Float32Equal"/> instance.
            </summary>
        </member>
        <member name="T:WebAssembly.Instructions.Float32Floor">
            <summary>
            Floor operator.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Float32Floor.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.Float32Floor"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Float32Floor.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.Float32Floor"/> instance.
            </summary>
        </member>
        <member name="T:WebAssembly.Instructions.Float32GreaterThan">
            <summary>
            Compare ordered and greater than.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Float32GreaterThan.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.Float32GreaterThan"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Float32GreaterThan.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.Float32GreaterThan"/> instance.
            </summary>
        </member>
        <member name="T:WebAssembly.Instructions.Float32GreaterThanOrEqual">
            <summary>
            Compare ordered and greater than or equal.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Float32GreaterThanOrEqual.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.Float32GreaterThanOrEqual"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Float32GreaterThanOrEqual.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.Float32GreaterThanOrEqual"/> instance.
            </summary>
        </member>
        <member name="T:WebAssembly.Instructions.Float32LessThan">
            <summary>
            Compare ordered and less than.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Float32LessThan.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.Float32LessThan"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Float32LessThan.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.Float32LessThan"/> instance.
            </summary>
        </member>
        <member name="T:WebAssembly.Instructions.Float32LessThanOrEqual">
            <summary>
            Compare ordered and less than or equal.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Float32LessThanOrEqual.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.Float32LessThanOrEqual"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Float32LessThanOrEqual.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.Float32LessThanOrEqual"/> instance.
            </summary>
        </member>
        <member name="T:WebAssembly.Instructions.Float32Load">
            <summary>
            Load 4 bytes as f32.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Float32Load.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.Float32Load"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Float32Load.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.Float32Load"/> instance.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Float32Load.Equals(WebAssembly.Instructions.Float32Load)">
            <summary>
            Determines whether this instruction is identical to another.
            </summary>
            <param name="other">The instruction to compare against.</param>
            <returns>True if they have the same type and value, otherwise false.</returns>
        </member>
        <member name="T:WebAssembly.Instructions.Float32Maximum">
            <summary>
            Maximum (binary operator); if either operand is NaN, returns NaN.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Float32Maximum.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.Float32Maximum"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Float32Maximum.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.Float32Maximum"/> instance.
            </summary>
        </member>
        <member name="T:WebAssembly.Instructions.Float32Minimum">
            <summary>
            Minimum (binary operator); if either operand is NaN, returns NaN.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Float32Minimum.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.Float32Minimum"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Float32Minimum.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.Float32Minimum"/> instance.
            </summary>
        </member>
        <member name="T:WebAssembly.Instructions.Float32Multiply">
            <summary>
            Multiplication.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Float32Multiply.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.Float32Multiply"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Float32Multiply.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.Float32Multiply"/> instance.
            </summary>
        </member>
        <member name="T:WebAssembly.Instructions.Float32Nearest">
            <summary>
            Round to nearest integer, ties to even.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Float32Nearest.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.Float32Nearest"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Float32Nearest.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.Float32Nearest"/> instance.
            </summary>
        </member>
        <member name="T:WebAssembly.Instructions.Float32Negate">
            <summary>
            Negation.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Float32Negate.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.Float32Negate"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Float32Negate.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.Float32Negate"/> instance.
            </summary>
        </member>
        <member name="T:WebAssembly.Instructions.Float32NotEqual">
            <summary>
            Compare unordered or unequal.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Float32NotEqual.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.Float32NotEqual"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Float32NotEqual.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.Float32NotEqual"/> instance.
            </summary>
        </member>
        <member name="T:WebAssembly.Instructions.Float32ReinterpretInt32">
            <summary>
            Reinterpret the bits of a 32-bit integer as a 32-bit float.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Float32ReinterpretInt32.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.Float32ReinterpretInt32"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Float32ReinterpretInt32.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.Float32ReinterpretInt32"/> instance.
            </summary>
        </member>
        <member name="T:WebAssembly.Instructions.Float32SquareRoot">
            <summary>
            Square root.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Float32SquareRoot.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.Float32SquareRoot"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Float32SquareRoot.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.Float32SquareRoot"/> instance.
            </summary>
        </member>
        <member name="T:WebAssembly.Instructions.Float32Store">
            <summary>
            (No conversion) store 4 bytes.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Float32Store.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.Float32Store"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Float32Store.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.Float32Store"/> instance.
            </summary>
        </member>
        <member name="T:WebAssembly.Instructions.Float32Subtract">
            <summary>
            Subtraction.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Float32Subtract.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.Float32Subtract"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Float32Subtract.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.Float32Subtract"/> instance.
            </summary>
        </member>
        <member name="T:WebAssembly.Instructions.Float32Truncate">
            <summary>
            Round to nearest integer towards zero.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Float32Truncate.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.Float32Truncate"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Float32Truncate.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.Float32Truncate"/> instance.
            </summary>
        </member>
        <member name="T:WebAssembly.Instructions.Float64Absolute">
            <summary>
            Absolute value.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Float64Absolute.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.Float64Absolute"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Float64Absolute.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.Float64Absolute"/> instance.
            </summary>
        </member>
        <member name="T:WebAssembly.Instructions.Float64Add">
            <summary>
            Addition.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Float64Add.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.Float64Add"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Float64Add.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.Float64Add"/> instance.
            </summary>
        </member>
        <member name="T:WebAssembly.Instructions.Float64CallWrapperInstruction">
            <summary>
            Wraps a <see cref="T:System.Double"/>-only .NET API call with conversions so it can be used with <see cref="F:WebAssembly.WebAssemblyValueType.Float32"/>.
            </summary>
        </member>
        <member name="T:WebAssembly.Instructions.Float64Ceiling">
            <summary>
            Ceiling operator.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Float64Ceiling.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.Float64Ceiling"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Float64Ceiling.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.Float64Ceiling"/> instance.
            </summary>
        </member>
        <member name="T:WebAssembly.Instructions.Float64Constant">
            <summary>
            Produce the value of an f64 immediate.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Float64Constant.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.Float64Constant"/>.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Float64Constant.Value">
            <summary>
            Gets or sets the value of the constant.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Float64Constant.#ctor">
            <summary>
            Creates a new <see cref="T:WebAssembly.Instructions.Float64Constant"/> instance.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Float64Constant.#ctor(System.Double)">
            <summary>
            Creates a new <see cref="T:WebAssembly.Instructions.Float64Constant"/> instance with the provided value.
            </summary>
            <param name="value">The value of the constant.  This is passed to the <see cref="P:WebAssembly.Instructions.Float64Constant.Value"/> property.</param>
        </member>
        <member name="M:WebAssembly.Instructions.Float64Constant.#ctor(WebAssembly.Reader)">
            <summary>
            Creates a new <see cref="T:WebAssembly.Instructions.Float64Constant"/> instance from binary data.
            </summary>
            <param name="reader">The source of binary data.</param>
        </member>
        <member name="M:WebAssembly.Instructions.Float64Constant.Equals(WebAssembly.Instruction)">
            <summary>
            Determines whether this instruction is identical to another.
            </summary>
            <param name="other">The instruction to compare against.</param>
            <returns>True if they have the same type and value, otherwise false.</returns>
        </member>
        <member name="M:WebAssembly.Instructions.Float64Constant.GetHashCode">
            <summary>
            Returns a simple hash code based on the value of the instruction.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="T:WebAssembly.Instructions.Float64ConvertInt32Signed">
            <summary>
            Convert a signed 32-bit integer to a 64-bit float.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Float64ConvertInt32Signed.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.Float64ConvertInt32Signed"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Float64ConvertInt32Signed.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.Float64ConvertInt32Signed"/> instance.
            </summary>
        </member>
        <member name="T:WebAssembly.Instructions.Float64ConvertInt32Unsigned">
            <summary>
            Convert an unsigned 32-bit integer to a 64-bit float.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Float64ConvertInt32Unsigned.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.Float64ConvertInt32Unsigned"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Float64ConvertInt32Unsigned.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.Float64ConvertInt32Unsigned"/> instance.
            </summary>
        </member>
        <member name="T:WebAssembly.Instructions.Float64ConvertInt64Signed">
            <summary>
            Convert a signed 64-bit integer to a 64-bit float.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Float64ConvertInt64Signed.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.Float64ConvertInt64Signed"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Float64ConvertInt64Signed.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.Float64ConvertInt64Signed"/> instance.
            </summary>
        </member>
        <member name="T:WebAssembly.Instructions.Float64ConvertInt64Unsigned">
            <summary>
            Convert an unsigned 64-bit integer to a 64-bit float.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Float64ConvertInt64Unsigned.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.Float64ConvertInt64Unsigned"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Float64ConvertInt64Unsigned.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.Float64ConvertInt64Unsigned"/> instance.
            </summary>
        </member>
        <member name="T:WebAssembly.Instructions.Float64CopySign">
            <summary>
            Copysign.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Float64CopySign.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.Float64CopySign"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Float64CopySign.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.Float64CopySign"/> instance.
            </summary>
        </member>
        <member name="T:WebAssembly.Instructions.Float64Divide">
            <summary>
            Division.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Float64Divide.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.Float64Divide"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Float64Divide.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.Float64Divide"/> instance.
            </summary>
        </member>
        <member name="T:WebAssembly.Instructions.Float64Equal">
            <summary>
            Compare ordered and equal.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Float64Equal.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.Float64Equal"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Float64Equal.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.Float64Equal"/> instance.
            </summary>
        </member>
        <member name="T:WebAssembly.Instructions.Float64Floor">
            <summary>
            Floor operator.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Float64Floor.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.Float64Floor"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Float64Floor.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.Float64Floor"/> instance.
            </summary>
        </member>
        <member name="T:WebAssembly.Instructions.Float64GreaterThan">
            <summary>
            Compare ordered and greater than.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Float64GreaterThan.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.Float64GreaterThan"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Float64GreaterThan.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.Float64GreaterThan"/> instance.
            </summary>
        </member>
        <member name="T:WebAssembly.Instructions.Float64GreaterThanOrEqual">
            <summary>
            Compare ordered and greater than or equal.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Float64GreaterThanOrEqual.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.Float64GreaterThanOrEqual"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Float64GreaterThanOrEqual.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.Float64GreaterThanOrEqual"/> instance.
            </summary>
        </member>
        <member name="T:WebAssembly.Instructions.Float64LessThan">
            <summary>
            Compare ordered and less than.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Float64LessThan.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.Float64LessThan"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Float64LessThan.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.Float64LessThan"/> instance.
            </summary>
        </member>
        <member name="T:WebAssembly.Instructions.Float64LessThanOrEqual">
            <summary>
            Compare ordered and less than or equal.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Float64LessThanOrEqual.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.Float64LessThanOrEqual"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Float64LessThanOrEqual.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.Float64LessThanOrEqual"/> instance.
            </summary>
        </member>
        <member name="T:WebAssembly.Instructions.Float64Load">
            <summary>
            Load 8 bytes as f64.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Float64Load.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.Float64Load"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Float64Load.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.Float64Load"/> instance.
            </summary>
        </member>
        <member name="T:WebAssembly.Instructions.Float64Maximum">
            <summary>
            Maximum (binary operator); if either operand is NaN, returns NaN.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Float64Maximum.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.Float64Maximum"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Float64Maximum.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.Float64Maximum"/> instance.
            </summary>
        </member>
        <member name="T:WebAssembly.Instructions.Float64Minimum">
            <summary>
            Minimum (binary operator); if either operand is NaN, returns NaN.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Float64Minimum.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.Float64Minimum"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Float64Minimum.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.Float64Minimum"/> instance.
            </summary>
        </member>
        <member name="T:WebAssembly.Instructions.Float64Multiply">
            <summary>
            Multiplication.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Float64Multiply.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.Float64Multiply"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Float64Multiply.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.Float64Multiply"/> instance.
            </summary>
        </member>
        <member name="T:WebAssembly.Instructions.Float64Nearest">
            <summary>
            Round to nearest integer, ties to even.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Float64Nearest.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.Float64Nearest"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Float64Nearest.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.Float64Nearest"/> instance.
            </summary>
        </member>
        <member name="T:WebAssembly.Instructions.Float64Negate">
            <summary>
            Negation.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Float64Negate.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.Float64Negate"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Float64Negate.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.Float64Negate"/> instance.
            </summary>
        </member>
        <member name="T:WebAssembly.Instructions.Float64NotEqual">
            <summary>
            Compare unordered or unequal.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Float64NotEqual.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.Float64NotEqual"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Float64NotEqual.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.Float64NotEqual"/> instance.
            </summary>
        </member>
        <member name="T:WebAssembly.Instructions.Float64PromoteFloat32">
            <summary>
            Promote a 32-bit float to a 64-bit float.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Float64PromoteFloat32.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.Float64PromoteFloat32"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Float64PromoteFloat32.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.Float64PromoteFloat32"/> instance.
            </summary>
        </member>
        <member name="T:WebAssembly.Instructions.Float64ReinterpretInt64">
            <summary>
            Reinterpret the bits of a 64-bit integer as a 64-bit float.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Float64ReinterpretInt64.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.Float64ReinterpretInt64"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Float64ReinterpretInt64.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.Float64ReinterpretInt64"/> instance.
            </summary>
        </member>
        <member name="T:WebAssembly.Instructions.Float64SquareRoot">
            <summary>
            Square root.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Float64SquareRoot.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.Float64SquareRoot"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Float64SquareRoot.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.Float64SquareRoot"/> instance.
            </summary>
        </member>
        <member name="T:WebAssembly.Instructions.Float64Store">
            <summary>
            (No conversion) store 8 bytes.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Float64Store.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.Float64Store"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Float64Store.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.Float64Store"/> instance.
            </summary>
        </member>
        <member name="T:WebAssembly.Instructions.Float64Subtract">
            <summary>
            Subtraction.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Float64Subtract.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.Float64Subtract"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Float64Subtract.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.Float64Subtract"/> instance.
            </summary>
        </member>
        <member name="T:WebAssembly.Instructions.Float64Truncate">
            <summary>
            Round to nearest integer towards zero.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Float64Truncate.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.Float64Truncate"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Float64Truncate.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.Float64Truncate"/> instance.
            </summary>
        </member>
        <member name="T:WebAssembly.Instructions.GlobalGet">
            <summary>
            (i32 index){T}; Read a global variable.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.GlobalGet.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.GlobalGet"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.GlobalGet.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.GlobalGet"/> instance.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.GlobalGet.#ctor(System.UInt32)">
            <summary>
            Creates a new <see cref="T:WebAssembly.Instructions.GlobalGet"/> for the provided variable index.
            </summary>
            <param name="index">The index of the variable to access.</param>
        </member>
        <member name="T:WebAssembly.Instructions.GlobalSet">
            <summary>
            (i32 index, T value){T} => i32 index; Write a global variable.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.GlobalSet.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.GlobalSet"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.GlobalSet.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.GlobalSet"/> instance.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.GlobalSet.#ctor(System.UInt32)">
            <summary>
            Creates a new <see cref="T:WebAssembly.Instructions.GlobalSet"/> for the provided variable index.
            </summary>
            <param name="index">The index of the variable to access.</param>
        </member>
        <member name="T:WebAssembly.Instructions.If">
            <summary>
            The beginning of an if construct with an implicit "then" block.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.If.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.If"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.If.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.If"/> instance.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.If.#ctor(WebAssembly.BlockType)">
            <summary>
            Creates a new <see cref="T:WebAssembly.Instructions.If"/> of the provided type.
            </summary>
            <param name="type">Becomes the block's <see cref="P:WebAssembly.Instructions.BlockTypeInstruction.Type"/>.</param>
        </member>
        <member name="T:WebAssembly.Instructions.Int32Add">
            <summary>
            Sign-agnostic addition.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Int32Add.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.Int32Add"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Int32Add.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.Int32Add"/> instance.
            </summary>
        </member>
        <member name="T:WebAssembly.Instructions.Int32And">
            <summary>
            Sign-agnostic bitwise and.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Int32And.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.Int32And"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Int32And.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.Int32And"/> instance.
            </summary>
        </member>
        <member name="T:WebAssembly.Instructions.Int32Constant">
            <summary>
            Produce the value of an i32 immediate.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Int32Constant.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.Int32Constant"/>.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Int32Constant.Value">
            <summary>
            Gets or sets the value of the constant.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Int32Constant.#ctor">
            <summary>
            Creates a new <see cref="T:WebAssembly.Instructions.Int32Constant"/> instance.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Int32Constant.#ctor(System.Int32)">
            <summary>
            Creates a new <see cref="T:WebAssembly.Instructions.Int32Constant"/> instance with the provided value.
            </summary>
            <param name="value">The value of the constant.  This is passed to the <see cref="P:WebAssembly.Instructions.Int32Constant.Value"/> property.</param>
        </member>
        <member name="M:WebAssembly.Instructions.Int32Constant.#ctor(System.UInt32)">
            <summary>
            Creates a new <see cref="T:WebAssembly.Instructions.Int32Constant"/> instance with the provided value.
            </summary>
            <param name="value">The value of the constant.  This is passed to the <see cref="P:WebAssembly.Instructions.Int32Constant.Value"/> property with an unchecked cast.</param>
        </member>
        <member name="M:WebAssembly.Instructions.Int32Constant.#ctor(WebAssembly.Reader)">
            <summary>
            Creates a new <see cref="T:WebAssembly.Instructions.Int32Constant"/> instance from binary data.
            </summary>
            <param name="reader">The source of binary data.</param>
        </member>
        <member name="M:WebAssembly.Instructions.Int32Constant.Equals(WebAssembly.Instruction)">
            <summary>
            Determines whether this instruction is identical to another.
            </summary>
            <param name="other">The instruction to compare against.</param>
            <returns>True if they have the same type and value, otherwise false.</returns>
        </member>
        <member name="M:WebAssembly.Instructions.Int32Constant.GetHashCode">
            <summary>
            Returns a simple hash code based on the value of the instruction.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="T:WebAssembly.Instructions.Int32CountLeadingZeroes">
            <summary>
            Sign-agnostic count leading zero bits.  All zero bits are considered leading if the value is zero.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Int32CountLeadingZeroes.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.Int32CountLeadingZeroes"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Int32CountLeadingZeroes.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.Int32CountLeadingZeroes"/> instance.
            </summary>
        </member>
        <member name="T:WebAssembly.Instructions.Int32CountOneBits">
            <summary>
            Sign-agnostic count number of one bits.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Int32CountOneBits.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.Int32CountOneBits"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Int32CountOneBits.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.Int32CountOneBits"/> instance.
            </summary>
        </member>
        <member name="T:WebAssembly.Instructions.Int32CountTrailingZeroes">
            <summary>
            Sign-agnostic count trailing zero bits.  All zero bits are considered trailing if the value is zero.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Int32CountTrailingZeroes.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.Int32CountTrailingZeroes"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Int32CountTrailingZeroes.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.Int32CountTrailingZeroes"/> instance.
            </summary>
        </member>
        <member name="T:WebAssembly.Instructions.Int32DivideSigned">
            <summary>
            Signed division (result is truncated toward zero).
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Int32DivideSigned.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.Int32DivideSigned"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Int32DivideSigned.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.Int32DivideSigned"/> instance.
            </summary>
        </member>
        <member name="T:WebAssembly.Instructions.Int32DivideUnsigned">
            <summary>
            Unsigned division (result is floored).
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Int32DivideUnsigned.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.Int32DivideUnsigned"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Int32DivideUnsigned.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.Int32DivideUnsigned"/> instance.
            </summary>
        </member>
        <member name="T:WebAssembly.Instructions.Int32Equal">
            <summary>
            Sign-agnostic compare equal.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Int32Equal.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.Int32Equal"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Int32Equal.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.Int32Equal"/> instance.
            </summary>
        </member>
        <member name="T:WebAssembly.Instructions.Int32EqualZero">
            <summary>
            Compare equal to zero (return 1 if operand is zero, 0 otherwise).
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Int32EqualZero.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.Int32EqualZero"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Int32EqualZero.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.Int32EqualZero"/> instance.
            </summary>
        </member>
        <member name="T:WebAssembly.Instructions.Int32ExclusiveOr">
            <summary>
            Sign-agnostic bitwise exclusive or.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Int32ExclusiveOr.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.Int32ExclusiveOr"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Int32ExclusiveOr.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.Int32ExclusiveOr"/> instance.
            </summary>
        </member>
        <member name="T:WebAssembly.Instructions.Int32GreaterThanOrEqualSigned">
            <summary>
            Signed greater than or equal.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Int32GreaterThanOrEqualSigned.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.Int32GreaterThanOrEqualSigned"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Int32GreaterThanOrEqualSigned.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.Int32GreaterThanOrEqualSigned"/> instance.
            </summary>
        </member>
        <member name="T:WebAssembly.Instructions.Int32GreaterThanOrEqualUnsigned">
            <summary>
            Unsigned greater than or equal.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Int32GreaterThanOrEqualUnsigned.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.Int32GreaterThanOrEqualUnsigned"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Int32GreaterThanOrEqualUnsigned.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.Int32GreaterThanOrEqualUnsigned"/> instance.
            </summary>
        </member>
        <member name="T:WebAssembly.Instructions.Int32GreaterThanSigned">
            <summary>
            Signed greater than.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Int32GreaterThanSigned.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.Int32GreaterThanSigned"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Int32GreaterThanSigned.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.Int32GreaterThanSigned"/> instance.
            </summary>
        </member>
        <member name="T:WebAssembly.Instructions.Int32GreaterThanUnsigned">
            <summary>
            Unsigned greater than.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Int32GreaterThanUnsigned.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.Int32GreaterThanUnsigned"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Int32GreaterThanUnsigned.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.Int32GreaterThanUnsigned"/> instance.
            </summary>
        </member>
        <member name="T:WebAssembly.Instructions.Int32LessThanOrEqualSigned">
            <summary>
            Signed less than or equal.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Int32LessThanOrEqualSigned.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.Int32LessThanOrEqualSigned"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Int32LessThanOrEqualSigned.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.Int32LessThanOrEqualSigned"/> instance.
            </summary>
        </member>
        <member name="T:WebAssembly.Instructions.Int32LessThanOrEqualUnsigned">
            <summary>
            Unsigned less than or equal.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Int32LessThanOrEqualUnsigned.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.Int32LessThanOrEqualUnsigned"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Int32LessThanOrEqualUnsigned.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.Int32LessThanOrEqualUnsigned"/> instance.
            </summary>
        </member>
        <member name="T:WebAssembly.Instructions.Int32LessThanSigned">
            <summary>
            Signed less than.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Int32LessThanSigned.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.Int32LessThanSigned"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Int32LessThanSigned.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.Int32LessThanSigned"/> instance.
            </summary>
        </member>
        <member name="T:WebAssembly.Instructions.Int32LessThanUnsigned">
            <summary>
            Unsigned less than.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Int32LessThanUnsigned.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.Int32LessThanUnsigned"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Int32LessThanUnsigned.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.Int32LessThanUnsigned"/> instance.
            </summary>
        </member>
        <member name="T:WebAssembly.Instructions.Int32Load">
            <summary>
            Load 4 bytes as i32.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Int32Load.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.Int32Load"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Int32Load.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.Int32Load"/> instance.
            </summary>
        </member>
        <member name="T:WebAssembly.Instructions.Int32Load16Signed">
            <summary>
            Load 2 bytes and sign-extend i16 to i32.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Int32Load16Signed.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.Int32Load16Signed"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Int32Load16Signed.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.Int32Load16Signed"/> instance.
            </summary>
        </member>
        <member name="T:WebAssembly.Instructions.Int32Load16Unsigned">
            <summary>
            Load 2 bytes and zero-extend i16 to i32.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Int32Load16Unsigned.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.Int32Load16Unsigned"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Int32Load16Unsigned.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.Int32Load16Unsigned"/> instance.
            </summary>
        </member>
        <member name="T:WebAssembly.Instructions.Int32Load8Signed">
            <summary>
            Load 1 byte and sign-extend i8 to i32.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Int32Load8Signed.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.Int32Load8Signed"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Int32Load8Signed.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.Int32Load8Signed"/> instance.
            </summary>
        </member>
        <member name="T:WebAssembly.Instructions.Int32Load8Unsigned">
            <summary>
            Load 1 byte and zero-extend i8 to i32.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Int32Load8Unsigned.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.Int32Load8Unsigned"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Int32Load8Unsigned.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.Int32Load8Unsigned"/> instance.
            </summary>
        </member>
        <member name="T:WebAssembly.Instructions.Int32Multiply">
            <summary>
            Sign-agnostic multiplication (lower 32-bits).
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Int32Multiply.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.Int32Multiply"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Int32Multiply.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.Int32Multiply"/> instance.
            </summary>
        </member>
        <member name="T:WebAssembly.Instructions.Int32NotEqual">
            <summary>
            Sign-agnostic compare unequal.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Int32NotEqual.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.Int32NotEqual"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Int32NotEqual.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.Int32NotEqual"/> instance.
            </summary>
        </member>
        <member name="T:WebAssembly.Instructions.Int32Or">
            <summary>
            Sign-agnostic bitwise inclusive or.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Int32Or.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.Int32Or"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Int32Or.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.Int32Or"/> instance.
            </summary>
        </member>
        <member name="T:WebAssembly.Instructions.Int32ReinterpretFloat32">
            <summary>
            Reinterpret the bits of a 32-bit float as a 32-bit integer.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Int32ReinterpretFloat32.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.Int32ReinterpretFloat32"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Int32ReinterpretFloat32.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.Int32ReinterpretFloat32"/> instance.
            </summary>
        </member>
        <member name="T:WebAssembly.Instructions.Int32RemainderSigned">
            <summary>
            Signed remainder (result has the sign of the dividend).
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Int32RemainderSigned.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.Int32RemainderSigned"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Int32RemainderSigned.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.Int32RemainderSigned"/> instance.
            </summary>
        </member>
        <member name="T:WebAssembly.Instructions.Int32RemainderUnsigned">
            <summary>
            Unsigned remainder.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Int32RemainderUnsigned.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.Int32RemainderUnsigned"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Int32RemainderUnsigned.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.Int32RemainderUnsigned"/> instance.
            </summary>
        </member>
        <member name="T:WebAssembly.Instructions.Int32RotateLeft">
            <summary>
            Sign-agnostic rotate left.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Int32RotateLeft.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.Int32RotateLeft"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Int32RotateLeft.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.Int32RotateLeft"/> instance.
            </summary>
        </member>
        <member name="T:WebAssembly.Instructions.Int32RotateRight">
            <summary>
            Sign-agnostic rotate right.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Int32RotateRight.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.Int32RotateRight"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Int32RotateRight.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.Int32RotateRight"/> instance.
            </summary>
        </member>
        <member name="T:WebAssembly.Instructions.Int32ShiftLeft">
            <summary>
            Sign-agnostic shift left.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Int32ShiftLeft.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.Int32ShiftLeft"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Int32ShiftLeft.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.Int32ShiftLeft"/> instance.
            </summary>
        </member>
        <member name="T:WebAssembly.Instructions.Int32ShiftRightSigned">
            <summary>
            Zero-replicating (logical) shift right.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Int32ShiftRightSigned.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.Int32ShiftRightSigned"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Int32ShiftRightSigned.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.Int32ShiftRightSigned"/> instance.
            </summary>
        </member>
        <member name="T:WebAssembly.Instructions.Int32ShiftRightUnsigned">
            <summary>
            Sign-replicating (arithmetic) shift right.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Int32ShiftRightUnsigned.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.Int32ShiftRightUnsigned"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Int32ShiftRightUnsigned.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.Int32ShiftRightUnsigned"/> instance.
            </summary>
        </member>
        <member name="T:WebAssembly.Instructions.Int32Store">
            <summary>
            (No conversion) store 4 bytes.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Int32Store.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.Int32Store"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Int32Store.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.Int32Store"/> instance.
            </summary>
        </member>
        <member name="T:WebAssembly.Instructions.Int32Store16">
            <summary>
            Wrap i32 to i16 and store 2 bytes.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Int32Store16.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.Int32Store16"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Int32Store16.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.Int32Store16"/> instance.
            </summary>
        </member>
        <member name="T:WebAssembly.Instructions.Int32Store8">
            <summary>
            Wrap i32 to i8 and store 1 byte.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Int32Store8.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.Int32Store8"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Int32Store8.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.Int32Store8"/> instance.
            </summary>
        </member>
        <member name="T:WebAssembly.Instructions.Int32Subtract">
            <summary>
            Sign-agnostic subtraction.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Int32Subtract.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.Int32Subtract"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Int32Subtract.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.Int32Subtract"/> instance.
            </summary>
        </member>
        <member name="T:WebAssembly.Instructions.Int32TruncateFloat32Signed">
            <summary>
            Truncate a 32-bit float to a signed 32-bit integer.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Int32TruncateFloat32Signed.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.Int32TruncateFloat32Signed"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Int32TruncateFloat32Signed.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.Int32TruncateFloat32Signed"/> instance.
            </summary>
        </member>
        <member name="T:WebAssembly.Instructions.Int32TruncateFloat32Unsigned">
            <summary>
            Truncate a 32-bit float to an unsigned 32-bit integer.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Int32TruncateFloat32Unsigned.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.Int32TruncateFloat32Unsigned"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Int32TruncateFloat32Unsigned.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.Int32TruncateFloat32Unsigned"/> instance.
            </summary>
        </member>
        <member name="T:WebAssembly.Instructions.Int32TruncateFloat64Signed">
            <summary>
            Truncate a 64-bit float to a signed 32-bit integer.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Int32TruncateFloat64Signed.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.Int32TruncateFloat64Signed"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Int32TruncateFloat64Signed.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.Int32TruncateFloat64Signed"/> instance.
            </summary>
        </member>
        <member name="T:WebAssembly.Instructions.Int32TruncateFloat64Unsigned">
            <summary>
            Truncate a 64-bit float to an unsigned 32-bit integer.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Int32TruncateFloat64Unsigned.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.Int32TruncateFloat64Unsigned"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Int32TruncateFloat64Unsigned.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.Int32TruncateFloat64Unsigned"/> instance.
            </summary>
        </member>
        <member name="T:WebAssembly.Instructions.Int32WrapInt64">
            <summary>
            Wrap a 64-bit integer to a 32-bit integer.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Int32WrapInt64.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.Int32WrapInt64"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Int32WrapInt64.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.Int32WrapInt64"/> instance.
            </summary>
        </member>
        <member name="T:WebAssembly.Instructions.Int64Add">
            <summary>
            Sign-agnostic addition.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Int64Add.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.Int64Add"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Int64Add.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.Int64Add"/> instance.
            </summary>
        </member>
        <member name="T:WebAssembly.Instructions.Int64And">
            <summary>
            Sign-agnostic bitwise and.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Int64And.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.Int64And"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Int64And.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.Int64And"/> instance.
            </summary>
        </member>
        <member name="T:WebAssembly.Instructions.Int64Constant">
            <summary>
            Produce the value of an i64 immediate.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Int64Constant.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.Int64Constant"/>.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Int64Constant.Value">
            <summary>
            Gets or sets the value of the constant.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Int64Constant.#ctor">
            <summary>
            Creates a new <see cref="T:WebAssembly.Instructions.Int64Constant"/> instance.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Int64Constant.#ctor(System.Int64)">
            <summary>
            Creates a new <see cref="T:WebAssembly.Instructions.Int64Constant"/> instance with the provided value.
            </summary>
            <param name="value">The value of the constant.  This is passed to the <see cref="P:WebAssembly.Instructions.Int64Constant.Value"/> property.</param>
        </member>
        <member name="M:WebAssembly.Instructions.Int64Constant.#ctor(System.UInt64)">
            <summary>
            Creates a new <see cref="T:WebAssembly.Instructions.Int64Constant"/> instance with the provided value.
            </summary>
            <param name="value">The value of the constant.  This is passed to the <see cref="P:WebAssembly.Instructions.Int64Constant.Value"/> property.</param>
        </member>
        <member name="M:WebAssembly.Instructions.Int64Constant.#ctor(WebAssembly.Reader)">
            <summary>
            Creates a new <see cref="T:WebAssembly.Instructions.Int64Constant"/> instance from binary data.
            </summary>
            <param name="reader">The source of binary data.</param>
        </member>
        <member name="M:WebAssembly.Instructions.Int64Constant.Equals(WebAssembly.Instruction)">
            <summary>
            Determines whether this instruction is identical to another.
            </summary>
            <param name="other">The instruction to compare against.</param>
            <returns>True if they have the same type and value, otherwise false.</returns>
        </member>
        <member name="M:WebAssembly.Instructions.Int64Constant.GetHashCode">
            <summary>
            Returns a simple hash code based on the value of the instruction.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="T:WebAssembly.Instructions.Int64CountLeadingZeroes">
            <summary>
            Sign-agnostic count leading zero bits.  All zero bits are considered leading if the value is zero.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Int64CountLeadingZeroes.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.Int64CountLeadingZeroes"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Int64CountLeadingZeroes.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.Int64CountLeadingZeroes"/> instance.
            </summary>
        </member>
        <member name="T:WebAssembly.Instructions.Int64CountOneBits">
            <summary>
            Sign-agnostic count number of one bits.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Int64CountOneBits.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.Int64CountOneBits"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Int64CountOneBits.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.Int64CountOneBits"/> instance.
            </summary>
        </member>
        <member name="T:WebAssembly.Instructions.Int64CountTrailingZeroes">
            <summary>
            Sign-agnostic count trailing zero bits.  All zero bits are considered trailing if the value is zero.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Int64CountTrailingZeroes.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.Int64CountTrailingZeroes"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Int64CountTrailingZeroes.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.Int64CountTrailingZeroes"/> instance.
            </summary>
        </member>
        <member name="T:WebAssembly.Instructions.Int64DivideSigned">
            <summary>
            Signed division (result is truncated toward zero).
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Int64DivideSigned.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.Int64DivideSigned"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Int64DivideSigned.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.Int64DivideSigned"/> instance.
            </summary>
        </member>
        <member name="T:WebAssembly.Instructions.Int64DivideUnsigned">
            <summary>
            Unsigned division (result is floored).
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Int64DivideUnsigned.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.Int64DivideUnsigned"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Int64DivideUnsigned.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.Int64DivideUnsigned"/> instance.
            </summary>
        </member>
        <member name="T:WebAssembly.Instructions.Int64Equal">
            <summary>
            Sign-agnostic compare equal.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Int64Equal.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.Int64Equal"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Int64Equal.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.Int64Equal"/> instance.
            </summary>
        </member>
        <member name="T:WebAssembly.Instructions.Int64EqualZero">
            <summary>
            Compare equal to zero (return 1 if operand is zero, 0 otherwise).
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Int64EqualZero.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.Int64EqualZero"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Int64EqualZero.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.Int64EqualZero"/> instance.
            </summary>
        </member>
        <member name="T:WebAssembly.Instructions.Int64ExclusiveOr">
            <summary>
            Sign-agnostic bitwise exclusive or.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Int64ExclusiveOr.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.Int64ExclusiveOr"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Int64ExclusiveOr.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.Int64ExclusiveOr"/> instance.
            </summary>
        </member>
        <member name="T:WebAssembly.Instructions.Int64ExtendInt32Signed">
            <summary>
            Extend a signed 32-bit integer to a 64-bit integer.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Int64ExtendInt32Signed.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.Int64ExtendInt32Signed"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Int64ExtendInt32Signed.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.Int64ExtendInt32Signed"/> instance.
            </summary>
        </member>
        <member name="T:WebAssembly.Instructions.Int64ExtendInt32Unsigned">
            <summary>
            Extend an unsigned 32-bit integer to a 64-bit integer.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Int64ExtendInt32Unsigned.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.Int64ExtendInt32Unsigned"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Int64ExtendInt32Unsigned.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.Int64ExtendInt32Unsigned"/> instance.
            </summary>
        </member>
        <member name="T:WebAssembly.Instructions.Int64GreaterThanOrEqualSigned">
            <summary>
            Signed greater than or equal.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Int64GreaterThanOrEqualSigned.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.Int64GreaterThanOrEqualSigned"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Int64GreaterThanOrEqualSigned.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.Int64GreaterThanOrEqualSigned"/> instance.
            </summary>
        </member>
        <member name="T:WebAssembly.Instructions.Int64GreaterThanOrEqualUnsigned">
            <summary>
            Unsigned greater than or equal.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Int64GreaterThanOrEqualUnsigned.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.Int64GreaterThanOrEqualUnsigned"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Int64GreaterThanOrEqualUnsigned.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.Int64GreaterThanOrEqualUnsigned"/> instance.
            </summary>
        </member>
        <member name="T:WebAssembly.Instructions.Int64GreaterThanSigned">
            <summary>
            Signed greater than.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Int64GreaterThanSigned.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.Int64GreaterThanSigned"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Int64GreaterThanSigned.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.Int64GreaterThanSigned"/> instance.
            </summary>
        </member>
        <member name="T:WebAssembly.Instructions.Int64GreaterThanUnsigned">
            <summary>
            Unsigned greater than.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Int64GreaterThanUnsigned.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.Int64GreaterThanUnsigned"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Int64GreaterThanUnsigned.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.Int64GreaterThanUnsigned"/> instance.
            </summary>
        </member>
        <member name="T:WebAssembly.Instructions.Int64LessThanOrEqualSigned">
            <summary>
            Signed less than or equal.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Int64LessThanOrEqualSigned.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.Int64LessThanOrEqualSigned"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Int64LessThanOrEqualSigned.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.Int64LessThanOrEqualSigned"/> instance.
            </summary>
        </member>
        <member name="T:WebAssembly.Instructions.Int64LessThanOrEqualUnsigned">
            <summary>
            Unsigned less than or equal.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Int64LessThanOrEqualUnsigned.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.Int64LessThanOrEqualUnsigned"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Int64LessThanOrEqualUnsigned.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.Int64LessThanOrEqualUnsigned"/> instance.
            </summary>
        </member>
        <member name="T:WebAssembly.Instructions.Int64LessThanSigned">
            <summary>
            Signed less than.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Int64LessThanSigned.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.Int64LessThanSigned"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Int64LessThanSigned.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.Int64LessThanSigned"/> instance.
            </summary>
        </member>
        <member name="T:WebAssembly.Instructions.Int64LessThanUnsigned">
            <summary>
            Unsigned less than.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Int64LessThanUnsigned.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.Int64LessThanUnsigned"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Int64LessThanUnsigned.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.Int64LessThanUnsigned"/> instance.
            </summary>
        </member>
        <member name="T:WebAssembly.Instructions.Int64Load">
            <summary>
            Load 8 bytes as i64.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Int64Load.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.Int64Load"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Int64Load.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.Int64Load"/> instance.
            </summary>
        </member>
        <member name="T:WebAssembly.Instructions.Int64Load16Signed">
            <summary>
            Load 2 bytes and sign-extend i16 to i64.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Int64Load16Signed.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.Int64Load16Signed"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Int64Load16Signed.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.Int64Load16Signed"/> instance.
            </summary>
        </member>
        <member name="T:WebAssembly.Instructions.Int64Load16Unsigned">
            <summary>
            Load 2 bytes and zero-extend i16 to i64.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Int64Load16Unsigned.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.Int64Load16Unsigned"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Int64Load16Unsigned.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.Int64Load16Unsigned"/> instance.
            </summary>
        </member>
        <member name="T:WebAssembly.Instructions.Int64Load32Signed">
            <summary>
            Load 4 bytes and sign-extend i32 to i64.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Int64Load32Signed.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.Int64Load32Signed"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Int64Load32Signed.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.Int64Load32Signed"/> instance.
            </summary>
        </member>
        <member name="T:WebAssembly.Instructions.Int64Load32Unsigned">
            <summary>
            Load 4 bytes and zero-extend i32 to i64.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Int64Load32Unsigned.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.Int64Load32Unsigned"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Int64Load32Unsigned.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.Int64Load32Unsigned"/> instance.
            </summary>
        </member>
        <member name="T:WebAssembly.Instructions.Int64Load8Signed">
            <summary>
            Load 1 byte and sign-extend i8 to i64.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Int64Load8Signed.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.Int64Load8Signed"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Int64Load8Signed.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.Int64Load8Signed"/> instance.
            </summary>
        </member>
        <member name="T:WebAssembly.Instructions.Int64Load8Unsigned">
            <summary>
            Load 1 byte and zero-extend i8 to i64.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Int64Load8Unsigned.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.Int64Load8Unsigned"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Int64Load8Unsigned.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.Int64Load8Unsigned"/> instance.
            </summary>
        </member>
        <member name="T:WebAssembly.Instructions.Int64Multiply">
            <summary>
            Sign-agnostic multiplication (lower 64-bits).
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Int64Multiply.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.Int64Multiply"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Int64Multiply.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.Int64Multiply"/> instance.
            </summary>
        </member>
        <member name="T:WebAssembly.Instructions.Int64NotEqual">
            <summary>
            Sign-agnostic compare unequal.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Int64NotEqual.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.Int64NotEqual"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Int64NotEqual.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.Int64NotEqual"/> instance.
            </summary>
        </member>
        <member name="T:WebAssembly.Instructions.Int64Or">
            <summary>
            Sign-agnostic bitwise inclusive or.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Int64Or.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.Int64Or"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Int64Or.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.Int64Or"/> instance.
            </summary>
        </member>
        <member name="T:WebAssembly.Instructions.Int64ReinterpretFloat64">
            <summary>
            Reinterpret the bits of a 64-bit float as a 64-bit integer.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Int64ReinterpretFloat64.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.Int64ReinterpretFloat64"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Int64ReinterpretFloat64.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.Int64ReinterpretFloat64"/> instance.
            </summary>
        </member>
        <member name="T:WebAssembly.Instructions.Int64RemainderSigned">
            <summary>
            Signed remainder (result has the sign of the dividend).
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Int64RemainderSigned.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.Int64RemainderSigned"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Int64RemainderSigned.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.Int64RemainderSigned"/> instance.
            </summary>
        </member>
        <member name="T:WebAssembly.Instructions.Int64RemainderUnsigned">
            <summary>
            Unsigned remainder.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Int64RemainderUnsigned.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.Int64RemainderUnsigned"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Int64RemainderUnsigned.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.Int64RemainderUnsigned"/> instance.
            </summary>
        </member>
        <member name="T:WebAssembly.Instructions.Int64RotateLeft">
            <summary>
            Sign-agnostic rotate left.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Int64RotateLeft.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.Int64RotateLeft"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Int64RotateLeft.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.Int64RotateLeft"/> instance.
            </summary>
        </member>
        <member name="T:WebAssembly.Instructions.Int64RotateRight">
            <summary>
            Sign-agnostic rotate right.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Int64RotateRight.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.Int64RotateRight"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Int64RotateRight.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.Int64RotateRight"/> instance.
            </summary>
        </member>
        <member name="T:WebAssembly.Instructions.Int64ShiftLeft">
            <summary>
            Sign-agnostic shift left.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Int64ShiftLeft.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.Int64ShiftLeft"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Int64ShiftLeft.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.Int64ShiftLeft"/> instance.
            </summary>
        </member>
        <member name="T:WebAssembly.Instructions.Int64ShiftRightSigned">
            <summary>
            Zero-replicating (logical) shift right.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Int64ShiftRightSigned.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.Int64ShiftRightSigned"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Int64ShiftRightSigned.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.Int64ShiftRightSigned"/> instance.
            </summary>
        </member>
        <member name="T:WebAssembly.Instructions.Int64ShiftRightUnsigned">
             <summary>
            Sign-replicating (arithmetic) shift right.
             </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Int64ShiftRightUnsigned.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.Int64ShiftRightUnsigned"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Int64ShiftRightUnsigned.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.Int64ShiftRightUnsigned"/> instance.
            </summary>
        </member>
        <member name="T:WebAssembly.Instructions.Int64Store">
            <summary>
            (No conversion) store 8 bytes.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Int64Store.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.Int64Store"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Int64Store.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.Int64Store"/> instance.
            </summary>
        </member>
        <member name="T:WebAssembly.Instructions.Int64Store16">
            <summary>
            Wrap i64 to i16 and store 2 bytes.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Int64Store16.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.Int64Store16"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Int64Store16.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.Int64Store16"/> instance.
            </summary>
        </member>
        <member name="T:WebAssembly.Instructions.Int64Store32">
            <summary>
            Wrap i64 to i32 and store 4 bytes.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Int64Store32.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.Int64Store32"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Int64Store32.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.Int64Store32"/> instance.
            </summary>
        </member>
        <member name="T:WebAssembly.Instructions.Int64Store8">
            <summary>
            Wrap i64 to i8 and store 1 byte.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Int64Store8.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.Int64Store8"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Int64Store8.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.Int64Store8"/> instance.
            </summary>
        </member>
        <member name="T:WebAssembly.Instructions.Int64Subtract">
            <summary>
            Sign-agnostic subtraction.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Int64Subtract.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.Int64Subtract"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Int64Subtract.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.Int64Subtract"/> instance.
            </summary>
        </member>
        <member name="T:WebAssembly.Instructions.Int64TruncateFloat32Signed">
            <summary>
            Truncate a 32-bit float to a signed 64-bit integer.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Int64TruncateFloat32Signed.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.Int64TruncateFloat32Signed"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Int64TruncateFloat32Signed.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.Int64TruncateFloat32Signed"/> instance.
            </summary>
        </member>
        <member name="T:WebAssembly.Instructions.Int64TruncateFloat32Unsigned">
            <summary>
            Truncate a 32-bit float to an unsigned 64-bit integer.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Int64TruncateFloat32Unsigned.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.Int64TruncateFloat32Unsigned"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Int64TruncateFloat32Unsigned.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.Int64TruncateFloat32Unsigned"/> instance.
            </summary>
        </member>
        <member name="T:WebAssembly.Instructions.Int64TruncateFloat64Signed">
            <summary>
            Truncate a 64-bit float to a signed 64-bit integer.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Int64TruncateFloat64Signed.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.Int64TruncateFloat64Signed"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Int64TruncateFloat64Signed.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.Int64TruncateFloat64Signed"/> instance.
            </summary>
        </member>
        <member name="T:WebAssembly.Instructions.Int64TruncateFloat64Unsigned">
            <summary>
            Truncate a 64-bit float to an unsigned 64-bit integer.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Int64TruncateFloat64Unsigned.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.Int64TruncateFloat64Unsigned"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Int64TruncateFloat64Unsigned.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.Int64TruncateFloat64Unsigned"/> instance.
            </summary>
        </member>
        <member name="T:WebAssembly.Instructions.LocalGet">
            <summary>
            Read the current value of a local variable.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.LocalGet.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.LocalGet"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.LocalGet.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.LocalGet"/> instance.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.LocalGet.#ctor(System.UInt32)">
            <summary>
            Creates a new <see cref="T:WebAssembly.Instructions.LocalGet"/> for the provided variable index.
            </summary>
            <param name="index">The index of the variable to access.</param>
        </member>
        <member name="T:WebAssembly.Instructions.LocalSet">
            <summary>
            Set the current value of a local variable.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.LocalSet.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.LocalSet"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.LocalSet.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.LocalSet"/> instance.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.LocalSet.#ctor(System.UInt32)">
            <summary>
            Creates a new <see cref="T:WebAssembly.Instructions.LocalSet"/> for the provided variable index.
            </summary>
            <param name="index">The index of the variable to access.</param>
        </member>
        <member name="T:WebAssembly.Instructions.LocalTee">
            <summary>
            Like <see cref="T:WebAssembly.Instructions.LocalSet"/>, but also returns the set value.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.LocalTee.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.LocalTee"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.LocalTee.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.LocalTee"/> instance.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.LocalTee.#ctor(System.UInt32)">
            <summary>
            Creates a new <see cref="T:WebAssembly.Instructions.LocalTee"/> for the provided variable index.
            </summary>
            <param name="index">The index of the variable to access.</param>
        </member>
        <member name="T:WebAssembly.Instructions.Loop">
            <summary>
            A block with a label at the beginning which may be used to form loops.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Loop.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.Loop"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Loop.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.Loop"/> instance.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Loop.#ctor(WebAssembly.BlockType)">
            <summary>
            Creates a new <see cref="T:WebAssembly.Instructions.Loop"/> of the provided type.
            </summary>
            <param name="type">Becomes the block's <see cref="P:WebAssembly.Instructions.BlockTypeInstruction.Type"/>.</param>
        </member>
        <member name="T:WebAssembly.Instructions.MemoryGrow">
            <summary>
            Grow linear memory by a given unsigned delta of 65536-byte pages. Return the previous memory size in units of pages or -1 on failure.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.MemoryGrow.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.MemoryGrow"/>.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.MemoryGrow.Reserved">
            <summary>
            Not currently used.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.MemoryGrow.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.MemoryGrow"/> instance.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.MemoryGrow.Equals(WebAssembly.Instruction)">
            <summary>
            Determines whether this instruction is identical to another.
            </summary>
            <param name="other">The instruction to compare against.</param>
            <returns>True if they have the same type and value, otherwise false.</returns>
        </member>
        <member name="M:WebAssembly.Instructions.MemoryGrow.GetHashCode">
            <summary>
            Returns a simple hash code based on the value of the instruction.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="T:WebAssembly.Instructions.MemoryImmediateInstruction">
            <summary>
            Common features of instructions that access linear memory.
            </summary>
        </member>
        <member name="T:WebAssembly.Instructions.MemoryImmediateInstruction.Options">
            <summary>
            Indicates options for the instruction.
            </summary>
        </member>
        <member name="F:WebAssembly.Instructions.MemoryImmediateInstruction.Options.Align1">
            <summary>
            The access uses 8-bit alignment.
            </summary>
        </member>
        <member name="F:WebAssembly.Instructions.MemoryImmediateInstruction.Options.Align2">
            <summary>
            The access uses 16-bit alignment.
            </summary>
        </member>
        <member name="F:WebAssembly.Instructions.MemoryImmediateInstruction.Options.Align4">
            <summary>
            The access uses 32-bit alignment.
            </summary>
        </member>
        <member name="F:WebAssembly.Instructions.MemoryImmediateInstruction.Options.Align8">
            <summary>
            The access uses 64-bit alignment.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.MemoryImmediateInstruction.Flags">
            <summary>
            A bitfield which currently contains the alignment in the least significant bits, encoded as log2(alignment).
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.MemoryImmediateInstruction.Offset">
            <summary>
            The index within linear memory for the access operation.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.MemoryImmediateInstruction.Equals(WebAssembly.Instruction)">
            <summary>
            Determines whether this instruction is identical to another.
            </summary>
            <param name="other">The instruction to compare against.</param>
            <returns>True if they have the same type and value, otherwise false.</returns>
        </member>
        <member name="M:WebAssembly.Instructions.MemoryImmediateInstruction.Equals(WebAssembly.Instructions.MemoryImmediateInstruction)">
            <summary>
            Determines whether this instruction is identical to another.
            </summary>
            <param name="other">The instruction to compare against.</param>
            <returns>True if they have the same type and value, otherwise false.</returns>
        </member>
        <member name="M:WebAssembly.Instructions.MemoryImmediateInstruction.GetHashCode">
            <summary>
            Returns a simple hash code based on the value of the instruction.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="T:WebAssembly.Instructions.MemoryReadInstruction">
            <summary>
            Provides shared functionality for instructions that read from linear memory.
            </summary>
        </member>
        <member name="T:WebAssembly.Instructions.MemorySize">
            <summary>
            Return the current memory size in units of 65536-byte pages.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.MemorySize.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.MemorySize"/>.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.MemorySize.Reserved">
            <summary>
            Not currently used.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.MemorySize.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.MemorySize"/> instance.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.MemorySize.Equals(WebAssembly.Instruction)">
            <summary>
            Determines whether this instruction is identical to another.
            </summary>
            <param name="other">The instruction to compare against.</param>
            <returns>True if they have the same type and value, otherwise false.</returns>
        </member>
        <member name="M:WebAssembly.Instructions.MemorySize.GetHashCode">
            <summary>
            Returns a simple hash code based on the value of the instruction.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="T:WebAssembly.Instructions.MemoryWriteInstruction">
            <summary>
            Provides shared functionality for instructions that write to linear memory.
            </summary>
        </member>
        <member name="T:WebAssembly.Instructions.NoOperation">
            <summary>
            No operation, no effect.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.NoOperation.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.NoOperation"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.NoOperation.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.NoOperation"/> instance.
            </summary>
        </member>
        <member name="T:WebAssembly.Instructions.Return">
            <summary>
            Return zero or more values from this function.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Return.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.Return"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Return.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.Return"/> instance.
            </summary>
        </member>
        <member name="T:WebAssembly.Instructions.Select">
            <summary>
            A ternary operator with two operands, which have the same type as each other, plus a boolean (i32) condition. Returns the first operand if the condition operand is non-zero, or the second otherwise.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.Select.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.Select"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Select.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.Select"/> instance.
            </summary>
        </member>
        <member name="T:WebAssembly.Instructions.SimpleInstruction">
            <summary>
            Simple instructions have no customizability; their <see cref="T:WebAssembly.OpCode"/> defines their entire action.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.SimpleInstruction.Equals(WebAssembly.Instruction)">
            <summary>
            Determines whether this instruction is identical to another.
            </summary>
            <param name="other">The instruction to compare against.</param>
            <returns>True if they have the same type and value, otherwise false.</returns>
        </member>
        <member name="M:WebAssembly.Instructions.SimpleInstruction.GetHashCode">
            <summary>
            Returns the integer representation of <see cref="P:WebAssembly.Instruction.OpCode"/> as a hash code.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="T:WebAssembly.Instructions.Unreachable">
            <summary>
            An instruction which always traps.
            </summary>
            <remarks>It is intended to be used for example after calls to functions which are known by the producer not to return.</remarks>
        </member>
        <member name="P:WebAssembly.Instructions.Unreachable.OpCode">
            <summary>
            Always <see cref="F:WebAssembly.OpCode.Unreachable"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.Unreachable.#ctor">
            <summary>
            Creates a new  <see cref="T:WebAssembly.Instructions.Unreachable"/> instance.
            </summary>
        </member>
        <member name="T:WebAssembly.Instructions.ValueOneToOneCallInstruction">
            <summary>
            Identifies an instruction that uses a single method call to remove one value from the stack, replacing it with one value, all of a specific type.
            </summary>
        </member>
        <member name="T:WebAssembly.Instructions.ValueOneToOneInstruction">
            <summary>
            Identifies an instruction that uses a single CIL <see cref="T:System.Reflection.Emit.OpCode"/> to remove one value from the stack, replacing it with one value, both of a specific type.
            </summary>
        </member>
        <member name="T:WebAssembly.Instructions.ValueTwoToInt32Instruction">
            <summary>
            Identifies an instruction that uses a single CIL <see cref="T:System.Reflection.Emit.OpCode"/> to remove two values of the same type from the stack, returning a single <see cref="F:WebAssembly.WebAssemblyValueType.Int32"/>.
            </summary>
        </member>
        <member name="T:WebAssembly.Instructions.ValueTwoToInt32NotEqualZeroInstruction">
            <summary>
            Identifies an instruction that uses a single CIL <see cref="T:System.Reflection.Emit.OpCode"/> to remove two values of the same type from the stack, returning a single <see cref="F:WebAssembly.WebAssemblyValueType.Int32"/>.
            </summary>
        </member>
        <member name="T:WebAssembly.Instructions.ValueTwoToOneCallInstruction">
            <summary>
            Identifies an instruction that uses a single method call to remove two values from the stack, replacing it with one value, all of a specific type.
            </summary>
        </member>
        <member name="T:WebAssembly.Instructions.ValueTwoToOneInstruction">
            <summary>
            Identifies an instruction that uses a single CIL <see cref="T:System.Reflection.Emit.OpCode"/> to remove two values from the stack, replacing it with one value, all of a specific type.
            </summary>
        </member>
        <member name="T:WebAssembly.Instructions.VariableAccessInstruction">
            <summary>
            An instruction that accesses a variable by its 0-based index.
            </summary>
        </member>
        <member name="P:WebAssembly.Instructions.VariableAccessInstruction.Index">
            <summary>
            The 0-based index of the variable to access.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.VariableAccessInstruction.#ctor(System.UInt32)">
            <summary>
            Creates a new <see cref="T:WebAssembly.Instructions.VariableAccessInstruction"/> for the provided variable index.
            </summary>
            <param name="index">The index of the variable to access.</param>
        </member>
        <member name="M:WebAssembly.Instructions.VariableAccessInstruction.#ctor">
            <summary>
            Creates a new <see cref="T:WebAssembly.Instructions.VariableAccessInstruction"/> instance.
            </summary>
        </member>
        <member name="M:WebAssembly.Instructions.VariableAccessInstruction.Equals(WebAssembly.Instruction)">
            <summary>
            Determines whether this instruction is identical to another.
            </summary>
            <param name="other">The instruction to compare against.</param>
            <returns>True if they have the same type and value, otherwise false.</returns>
        </member>
        <member name="M:WebAssembly.Instructions.VariableAccessInstruction.GetHashCode">
            <summary>
            Returns a simple hash code based on the value of the instruction.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="T:WebAssembly.Local">
            <summary>
            Each local entry declares a number of local variables of a given type.
            </summary>
        </member>
        <member name="P:WebAssembly.Local.Count">
            <summary>
             The number of local variables of <see cref="P:WebAssembly.Local.Type"/>.
            </summary>
        </member>
        <member name="P:WebAssembly.Local.Type">
            <summary>
            Type of the variables.
            </summary>
        </member>
        <member name="M:WebAssembly.Local.#ctor">
            <summary>
            Creates a new <see cref="T:WebAssembly.Local"/> instance.
            </summary>
        </member>
        <member name="M:WebAssembly.Local.ToString">
            <summary>
            Expresses the value of this instance as a string.
            </summary>
            <returns>A string representation of this instance.</returns>
        </member>
        <member name="M:WebAssembly.Local.GetHashCode">
            <summary>
            Returns a hash code based on the value of this instance.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:WebAssembly.Local.Equals(System.Object)">
            <summary>
            Determines whether this instance is identical to another.
            </summary>
            <param name="obj">The object instance to compare against.</param>
            <returns>True if they have the same type and value, otherwise false.</returns>
        </member>
        <member name="M:WebAssembly.Local.Equals(WebAssembly.Local)">
            <summary>
            Determines whether this instance is identical to another.
            </summary>
            <param name="other">The instance to compare against.</param>
            <returns>True if they have the same type and value, otherwise false.</returns>
        </member>
        <member name="T:WebAssembly.Memory">
            <summary>
            Desribes a linear memory area within the assembly.
            </summary>
        </member>
        <member name="F:WebAssembly.Memory.PageSize">
            <summary>
            The standard memory page size.
            </summary>
        </member>
        <member name="P:WebAssembly.Memory.ResizableLimits">
            <summary>
            A packed tuple that describes the limits of the memory.
            </summary>
        </member>
        <member name="M:WebAssembly.Memory.#ctor">
            <summary>
            Creates a new <see cref="T:WebAssembly.Memory"/> instance.
            </summary>
        </member>
        <member name="M:WebAssembly.Memory.#ctor(System.UInt32,System.Nullable{System.UInt32})">
            <summary>
            Creates a new <see cref="T:WebAssembly.Memory"/> instance with the provided <see cref="P:WebAssembly.ResizableLimits.Minimum"/> and <see cref="P:WebAssembly.ResizableLimits.Maximum"/> values.
            </summary>
            <param name="minimum">Initial length (in units of table elements or 65,536-byte pages).</param>
            <param name="maximum">Maximum length (in units of table elements or 65,536-byte pages).</param>
        </member>
        <member name="M:WebAssembly.Memory.#ctor(WebAssembly.Reader)">
            <summary>
            Creates a new <see cref="T:WebAssembly.Memory"/> from a binary data stream.
            </summary>
            <param name="reader">The source of data.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="reader"/> cannot be null.</exception>
        </member>
        <member name="M:WebAssembly.Memory.ToString">
            <summary>
            Expresses the value of this instance as a string.
            </summary>
            <returns>A string representation of this instance.</returns>
        </member>
        <member name="T:WebAssembly.Module">
            <summary>
            Contains raw information about a WebAssembly module.  Use <see cref="M:WebAssembly.Module.Compile``1"/> if you wish to execute a WebAssembly file.
            </summary>
        </member>
        <member name="M:WebAssembly.Module.#ctor">
            <summary>
            Creates a new <see cref="T:WebAssembly.Module"/> instance.
            </summary>
        </member>
        <member name="F:WebAssembly.Module.Magic">
            <summary>
            Indicates that the source data is in the WebAssembly binary format.
            </summary>
        </member>
        <member name="P:WebAssembly.Module.CustomSections">
            <summary>
            Custom sections.
            </summary>
            <exception cref="T:System.ArgumentNullException">Value cannot be set to null.</exception>
        </member>
        <member name="P:WebAssembly.Module.Types">
            <summary>
            Function signatures.
            </summary>
            <exception cref="T:System.ArgumentNullException">Value cannot be set to null.</exception>
        </member>
        <member name="P:WebAssembly.Module.Imports">
            <summary>
            Imported external features.
            </summary>
            <exception cref="T:System.ArgumentNullException">Value cannot be set to null.</exception>
        </member>
        <member name="P:WebAssembly.Module.Functions">
            <summary>
            Functions defined within the assembly.
            </summary>
            <exception cref="T:System.ArgumentNullException">Value cannot be set to null.</exception>
        </member>
        <member name="P:WebAssembly.Module.Tables">
            <summary>
            Tables defined within the assembly.
            </summary>
            <exception cref="T:System.ArgumentNullException">Value cannot be set to null.</exception>
        </member>
        <member name="P:WebAssembly.Module.Memories">
            <summary>
            Linear memory areas defined within the assembly.
            </summary>
            <exception cref="T:System.ArgumentNullException">Value cannot be set to null.</exception>
        </member>
        <member name="P:WebAssembly.Module.Globals">
            <summary>
            Global values defined within the assembly.
            </summary>
            <exception cref="T:System.ArgumentNullException">Value cannot be set to null.</exception>
        </member>
        <member name="P:WebAssembly.Module.Exports">
            <summary>
            Features to be made available to the host environment.
            </summary>
            <exception cref="T:System.ArgumentNullException">Value cannot be set to null.</exception>
        </member>
        <member name="P:WebAssembly.Module.Start">
            <summary>
            Gets or sets the start function index, or null if no start function is present.
            </summary>
        </member>
        <member name="P:WebAssembly.Module.Elements">
            <summary>
            The elements section allows a module to initialize (at instantiation time) the elements of any imported or internally-defined table with any other definition in the module
            </summary>
            <exception cref="T:System.ArgumentNullException">Value cannot be set to null.</exception>
        </member>
        <member name="P:WebAssembly.Module.Codes">
            <summary>
            The code section contains a body for every function in the module.
            </summary>
            <exception cref="T:System.ArgumentNullException">Value cannot be set to null.</exception>
        </member>
        <member name="P:WebAssembly.Module.Data">
            <summary>
            The data section declares the initialized data that is loaded into the linear memory.
            </summary>
            <exception cref="T:System.ArgumentNullException">Value cannot be set to null.</exception>
        </member>
        <member name="M:WebAssembly.Module.ReadFromBinary(System.String)">
            <summary>
            Creates a new <see cref="T:WebAssembly.Module"/> from a file.
            </summary>
            <param name="path">The path to the file that contains a WebAssembly binary stream.</param>
            <returns>The module.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> cannot be null.</exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="path"/> is an empty string (""), contains only white space, or contains one or more invalid characters; or,
            <paramref name="path"/> refers to a non-file device, such as "con:", "com1:", "lpt1:", etc. in an NTFS environment.
            </exception>
            <exception cref="T:System.NotSupportedException"><paramref name="path"/> refers to a non-file device, such as "con:", "com1:", "lpt1:", etc. in a non-NTFS environment.</exception>
            <exception cref="T:System.IO.FileNotFoundException">The file indicated by <paramref name="path"/> could not be found.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified <paramref name="path"/> is invalid, such as being on an unmapped drive.</exception>
            <exception cref="T:System.IO.PathTooLongException">
            The specified path, file name, or both exceed the system-defined maximum length.
            For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
            <exception cref="T:WebAssembly.ModuleLoadException">An error was encountered while reading the WebAssembly file.</exception>
        </member>
        <member name="M:WebAssembly.Module.ReadFromBinary(System.IO.Stream)">
            <summary>
            Creates a new <see cref="T:WebAssembly.Module"/> from a stream.
            </summary>
            <param name="input">The source of data.  The stream is left open after reading is complete.</param>
            <returns>The module.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="input"/> cannot be null.</exception>
            <exception cref="T:WebAssembly.ModuleLoadException">An error was encountered while reading the WebAssembly stream.</exception>
        </member>
        <member name="M:WebAssembly.Module.WriteToBinary(System.IO.Stream)">
            <summary>
            Writes the contents of this module to a <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="output">The destination for data.  The stream is left open after reading is complete.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="output"/> cannot be null.</exception>
        </member>
        <member name="M:WebAssembly.Module.Compile``1">
            <summary>
            Creates an executable <see cref="T:WebAssembly.Instance`1"/> from this instance's data.
            This is intended for use with run-time code generation.  For directly compiling WebAssembly byte code, use <see cref="T:WebAssembly.Runtime.Compile"/>.
            </summary>
            <returns>A function that creates runnable instances.</returns>
            <exception cref="T:WebAssembly.ModuleLoadException">An error was encountered while reading the WebAssembly file.</exception>
        </member>
        <member name="T:WebAssembly.ModuleLoadException">
            <summary>
            Represents errors that occur during the loading process of a <see cref="T:WebAssembly.Module"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.ModuleLoadException.#ctor(System.String,System.Int64,System.Exception)">
            <summary>
            Creates a new <see cref="T:WebAssembly.ModuleLoadException"/> with the provided parameters.
            </summary>
            <param name="message">Becomes the <see cref="P:System.Exception.Message"/> value.</param>
            <param name="offset">The offset from the start of a data sequence where the error was encountered.</param>
            <param name="innerException">The wrapped exception.</param>
        </member>
        <member name="M:WebAssembly.ModuleLoadException.#ctor(System.String,System.Int64)">
            <summary>
            Creates a new <see cref="T:WebAssembly.ModuleLoadException"/> with the provided parameters.
            </summary>
            <param name="message">Becomes the <see cref="P:System.Exception.Message"/> value.</param>
            <param name="offset">The offset from the start of a data sequence where the error was encountered.</param>
        </member>
        <member name="P:WebAssembly.ModuleLoadException.Offset">
            <summary>
            The offset within the source that triggered the load failure.
            </summary>
        </member>
        <member name="T:WebAssembly.OpCode">
            <summary>
            Binary opcode values.
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.Unreachable">
            <summary>
            An instruction which always traps.
            </summary>
            <remarks>It is intended to be used for example after calls to functions which are known by the producer not to return.</remarks>
        </member>
        <member name="F:WebAssembly.OpCode.NoOperation">
            <summary>
            No operation, no effect.
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.Block">
            <summary>
            The beginning of a block construct, a sequence of instructions with a label at the end.
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.Loop">
            <summary>
            A block with a label at the beginning which may be used to form loops.
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.If">
            <summary>
            The beginning of an if construct with an implicit "then" block.
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.Else">
            <summary>
            Marks the else block of an <see cref="F:WebAssembly.OpCode.If"/>.
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.End">
            <summary>
            An instruction that marks the end of a block, loop, if, or function.
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.Branch">
            <summary>
            Branch to a given label in an enclosing construct.
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.BranchIf">
            <summary>
            Conditionally branch to a given label in an enclosing construct.
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.BranchTable">
            <summary>
            A jump table which jumps to a label in an enclosing construct.
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.Return">
            <summary>
            Return zero or more values from this function.
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.Call">
            <summary>
            Call function directly.
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.CallIndirect">
            <summary>
            Call function indirectly.
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.Drop">
            <summary>
            A unary operator that discards the value of its operand.
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.Select">
            <summary>
            A ternary operator with two operands, which have the same type as each other, plus a boolean (i32) condition. Returns the first operand if the condition operand is non-zero, or the second otherwise.
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.LocalGet">
            <summary>
            Read the current value of a local variable.
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.LocalSet">
            <summary>
            Set the current value of a local variable.
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.LocalTee">
            <summary>
            Like <see cref="F:WebAssembly.OpCode.LocalSet"/>, but also returns the set value.
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.GlobalGet">
            <summary>
            (i32 index){T} => {T}; Read a global variable.
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.GlobalSet">
            <summary>
            (i32 index, T value){T}; Write a global variable.
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.Int32Load">
            <summary>
            Load 4 bytes as i32.
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.Int64Load">
            <summary>
            Load 8 bytes as i64.
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.Float32Load">
            <summary>
            Load 4 bytes as f32.
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.Float64Load">
            <summary>
            Load 8 bytes as f64.
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.Int32Load8Signed">
            <summary>
            Load 1 byte and sign-extend i8 to i32.
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.Int32Load8Unsigned">
            <summary>
            Load 1 byte and zero-extend i8 to i32.
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.Int32Load16Signed">
            <summary>
            Load 2 bytes and sign-extend i16 to i32.
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.Int32Load16Unsigned">
            <summary>
            Load 2 bytes and zero-extend i16 to i32.
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.Int64Load8Signed">
            <summary>
            Load 1 byte and sign-extend i8 to i64.
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.Int64Load8Unsigned">
            <summary>
            Load 1 byte and zero-extend i8 to i64.
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.Int64Load16Signed">
            <summary>
            Load 2 bytes and sign-extend i16 to i64.
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.Int64Load16Unsigned">
            <summary>
            Load 2 bytes and zero-extend i16 to i64.
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.Int64Load32Signed">
            <summary>
            Load 4 bytes and sign-extend i32 to i64.
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.Int64Load32Unsigned">
            <summary>
            Load 4 bytes and zero-extend i32 to i64.
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.Int32Store">
            <summary>
            (No conversion) store 4 bytes.
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.Int64Store">
            <summary>
            (No conversion) store 8 bytes.
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.Float32Store">
            <summary>
            (No conversion) store 4 bytes.
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.Float64Store">
            <summary>
            (No conversion) store 8 bytes.
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.Int32Store8">
            <summary>
            Wrap i32 to i8 and store 1 byte.
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.Int32Store16">
            <summary>
            Wrap i32 to i16 and store 2 bytes.
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.Int64Store8">
            <summary>
            Wrap i64 to i8 and store 1 byte.
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.Int64Store16">
            <summary>
            Wrap i64 to i16 and store 2 bytes.
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.Int64Store32">
            <summary>
            Wrap i64 to i32 and store 4 bytes.
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.MemorySize">
            <summary>
            Return the current memory size in units of 65536-byte pages.
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.MemoryGrow">
            <summary>
            Grow linear memory by a given unsigned delta of 65536-byte pages. Return the previous memory size in units of pages or -1 on failure.
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.Int32Constant">
            <summary>
            Produce the value of an i32 immediate.
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.Int64Constant">
            <summary>
            Produce the value of an i64 immediate.
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.Float32Constant">
            <summary>
            Produce the value of an f32 immediate.
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.Float64Constant">
            <summary>
            Produce the value of an f64 immediate.
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.Int32EqualZero">
            <summary>
            Compare equal to zero (return 1 if operand is zero, 0 otherwise).
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.Int32Equal">
            <summary>
            Sign-agnostic compare equal.
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.Int32NotEqual">
            <summary>
            Sign-agnostic compare unequal.
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.Int32LessThanSigned">
            <summary>
            Signed less than.
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.Int32LessThanUnsigned">
            <summary>
            Unsigned less than.
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.Int32GreaterThanSigned">
            <summary>
            Signed greater than.
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.Int32GreaterThanUnsigned">
            <summary>
            Unsigned greater than.
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.Int32LessThanOrEqualSigned">
            <summary>
            Signed less than or equal.
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.Int32LessThanOrEqualUnsigned">
            <summary>
            Unsigned less than or equal.
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.Int32GreaterThanOrEqualSigned">
            <summary>
            Signed greater than or equal.
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.Int32GreaterThanOrEqualUnsigned">
            <summary>
            Unsigned greater than or equal.
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.Int64EqualZero">
            <summary>
            Compare equal to zero (return 1 if operand is zero, 0 otherwise).
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.Int64Equal">
            <summary>
            Sign-agnostic compare equal.
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.Int64NotEqual">
            <summary>
            Sign-agnostic compare unequal.
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.Int64LessThanSigned">
            <summary>
            Signed less than.
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.Int64LessThanUnsigned">
            <summary>
            Unsigned less than.
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.Int64GreaterThanSigned">
            <summary>
            Signed greater than.
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.Int64GreaterThanUnsigned">
            <summary>
            Unsigned greater than.
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.Int64LessThanOrEqualSigned">
            <summary>
            Signed less than or equal.
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.Int64LessThanOrEqualUnsigned">
            <summary>
            Unsigned less than or equal.
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.Int64GreaterThanOrEqualSigned">
            <summary>
            Signed greater than or equal.
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.Int64GreaterThanOrEqualUnsigned">
            <summary>
            Unsigned greater than or equal.
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.Float32Equal">
            <summary>
            Compare ordered and equal.
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.Float32NotEqual">
            <summary>
            Compare unordered or unequal.
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.Float32LessThan">
            <summary>
            Compare ordered and less than.
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.Float32GreaterThan">
            <summary>
            Compare ordered and greater than.
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.Float32LessThanOrEqual">
            <summary>
            Compare ordered and less than or equal.
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.Float32GreaterThanOrEqual">
            <summary>
            Compare ordered and greater than or equal.
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.Float64Equal">
            <summary>
            Compare ordered and equal.
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.Float64NotEqual">
            <summary>
            Compare unordered or unequal.
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.Float64LessThan">
            <summary>
            Compare ordered and less than.
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.Float64GreaterThan">
            <summary>
            Compare ordered and greater than.
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.Float64LessThanOrEqual">
            <summary>
            Compare ordered and less than or equal.
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.Float64GreaterThanOrEqual">
            <summary>
            Compare ordered and greater than or equal.
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.Int32CountLeadingZeroes">
            <summary>
            Sign-agnostic count leading zero bits.  All zero bits are considered leading if the value is zero.
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.Int32CountTrailingZeroes">
            <summary>
            Sign-agnostic count trailing zero bits.  All zero bits are considered trailing if the value is zero.
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.Int32CountOneBits">
            <summary>
            Sign-agnostic count number of one bits.
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.Int32Add">
            <summary>
            Sign-agnostic addition.
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.Int32Subtract">
            <summary>
            Sign-agnostic subtraction.
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.Int32Multiply">
            <summary>
            Sign-agnostic multiplication (lower 32-bits).
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.Int32DivideSigned">
            <summary>
            Signed division (result is truncated toward zero).
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.Int32DivideUnsigned">
            <summary>
            Unsigned division (result is floored).
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.Int32RemainderSigned">
            <summary>
            Signed remainder (result has the sign of the dividend).
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.Int32RemainderUnsigned">
            <summary>
            Unsigned remainder.
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.Int32And">
            <summary>
            Sign-agnostic bitwise and.
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.Int32Or">
            <summary>
            Sign-agnostic bitwise inclusive or.
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.Int32ExclusiveOr">
            <summary>
            Sign-agnostic bitwise exclusive or.
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.Int32ShiftLeft">
            <summary>
            Sign-agnostic shift left.
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.Int32ShiftRightSigned">
            <summary>
            Zero-replicating (logical) shift right.
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.Int32ShiftRightUnsigned">
            <summary>
            Sign-replicating (arithmetic) shift right.
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.Int32RotateLeft">
            <summary>
            Sign-agnostic rotate left.
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.Int32RotateRight">
            <summary>
            Sign-agnostic rotate right.
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.Int64CountLeadingZeroes">
            <summary>
            Sign-agnostic count leading zero bits.  All zero bits are considered leading if the value is zero.
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.Int64CountTrailingZeroes">
            <summary>
            Sign-agnostic count trailing zero bits.  All zero bits are considered trailing if the value is zero.
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.Int64CountOneBits">
            <summary>
            Sign-agnostic count number of one bits.
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.Int64Add">
            <summary>
            Sign-agnostic addition.
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.Int64Subtract">
            <summary>
            Sign-agnostic subtraction.
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.Int64Multiply">
            <summary>
            Sign-agnostic multiplication (lower 64-bits).
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.Int64DivideSigned">
            <summary>
            Signed division (result is truncated toward zero).
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.Int64DivideUnsigned">
            <summary>
            Unsigned division (result is floored).
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.Int64RemainderSigned">
            <summary>
            Signed remainder (result has the sign of the dividend).
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.Int64RemainderUnsigned">
            <summary>
            Unsigned remainder.
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.Int64And">
            <summary>
            Sign-agnostic bitwise and.
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.Int64Or">
            <summary>
            Sign-agnostic bitwise inclusive or.
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.Int64ExclusiveOr">
            <summary>
            Sign-agnostic bitwise exclusive or.
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.Int64ShiftLeft">
            <summary>
            Sign-agnostic shift left.
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.Int64ShiftRightSigned">
            <summary>
            Zero-replicating (logical) shift right.
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.Int64ShiftRightUnsigned">
            <summary>
            Sign-replicating (arithmetic) shift right.
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.Int64RotateLeft">
            <summary>
            Sign-agnostic rotate left.
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.Int64RotateRight">
            <summary>
            Sign-agnostic rotate right.
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.Float32Absolute">
            <summary>
            Absolute value.
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.Float32Negate">
            <summary>
            Negation.
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.Float32Ceiling">
            <summary>
            Ceiling operator.
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.Float32Floor">
            <summary>
            Floor operator.
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.Float32Truncate">
            <summary>
            Round to nearest integer towards zero.
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.Float32Nearest">
            <summary>
            Round to nearest integer, ties to even.
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.Float32SquareRoot">
            <summary>
            Square root.
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.Float32Add">
            <summary>
            Addition.
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.Float32Subtract">
            <summary>
            Subtraction.
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.Float32Multiply">
            <summary>
            Multiplication.
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.Float32Divide">
            <summary>
            Division.
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.Float32Minimum">
            <summary>
            Minimum (binary operator); if either operand is NaN, returns NaN.
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.Float32Maximum">
            <summary>
            Maximum (binary operator); if either operand is NaN, returns NaN.
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.Float32CopySign">
            <summary>
            Copysign.
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.Float64Absolute">
            <summary>
            Absolute value.
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.Float64Negate">
            <summary>
            Negation.
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.Float64Ceiling">
            <summary>
            Ceiling operator.
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.Float64Floor">
            <summary>
            Floor operator.
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.Float64Truncate">
            <summary>
            Round to nearest integer towards zero.
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.Float64Nearest">
            <summary>
            Round to nearest integer, ties to even.
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.Float64SquareRoot">
            <summary>
            Square root.
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.Float64Add">
            <summary>
            Addition.
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.Float64Subtract">
            <summary>
            Subtraction.
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.Float64Multiply">
            <summary>
            Multiplication.
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.Float64Divide">
            <summary>
            Division.
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.Float64Minimum">
            <summary>
            Minimum (binary operator); if either operand is NaN, returns NaN.
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.Float64Maximum">
            <summary>
            Maximum (binary operator); if either operand is NaN, returns NaN.
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.Float64CopySign">
            <summary>
            Copysign.
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.Int32WrapInt64">
            <summary>
            Wrap a 64-bit integer to a 32-bit integer.
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.Int32TruncateFloat32Signed">
            <summary>
            Truncate a 32-bit float to a signed 32-bit integer.
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.Int32TruncateFloat32Unsigned">
            <summary>
            Truncate a 32-bit float to an unsigned 32-bit integer.
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.Int32TruncateFloat64Signed">
            <summary>
            Truncate a 64-bit float to a signed 32-bit integer.
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.Int32TruncateFloat64Unsigned">
            <summary>
            Truncate a 64-bit float to an unsigned 32-bit integer.
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.Int64ExtendInt32Signed">
            <summary>
            Extend a signed 32-bit integer to a 64-bit integer.
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.Int64ExtendInt32Unsigned">
            <summary>
            Extend an unsigned 32-bit integer to a 64-bit integer.
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.Int64TruncateFloat32Signed">
            <summary>
            Truncate a 32-bit float to a signed 64-bit integer.
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.Int64TruncateFloat32Unsigned">
            <summary>
            Truncate a 32-bit float to an unsigned 64-bit integer.
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.Int64TruncateFloat64Signed">
            <summary>
            Truncate a 64-bit float to a signed 64-bit integer.
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.Int64TruncateFloat64Unsigned">
            <summary>
            Truncate a 64-bit float to an unsigned 64-bit integer.
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.Float32ConvertInt32Signed">
            <summary>
            Convert a signed 32-bit integer to a 32-bit float.
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.Float32ConvertInt32Unsigned">
            <summary>
            Convert an unsigned 32-bit integer to a 32-bit float.
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.Float32ConvertInt64Signed">
            <summary>
            Convert a signed 64-bit integer to a 32-bit float.
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.Float32ConvertInt64Unsigned">
            <summary>
            Convert an unsigned 64-bit integer to a 32-bit float.
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.Float32DemoteFloat64">
            <summary>
            Demote a 64-bit float to a 32-bit float.
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.Float64ConvertInt32Signed">
            <summary>
            Convert a signed 32-bit integer to a 64-bit float.
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.Float64ConvertInt32Unsigned">
            <summary>
            Convert an unsigned 32-bit integer to a 64-bit float.
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.Float64ConvertInt64Signed">
            <summary>
            Convert a signed 64-bit integer to a 64-bit float.
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.Float64ConvertInt64Unsigned">
            <summary>
            Convert an unsigned 64-bit integer to a 64-bit float.
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.Float64PromoteFloat32">
            <summary>
            Promote a 32-bit float to a 64-bit float.
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.Int32ReinterpretFloat32">
            <summary>
            Reinterpret the bits of a 32-bit float as a 32-bit integer.
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.Int64ReinterpretFloat64">
            <summary>
            Reinterpret the bits of a 64-bit float as a 64-bit integer.
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.Float32ReinterpretInt32">
            <summary>
            Reinterpret the bits of a 32-bit integer as a 32-bit float.
            </summary>
        </member>
        <member name="F:WebAssembly.OpCode.Float64ReinterpretInt64">
            <summary>
            Reinterpret the bits of a 64-bit integer as a 64-bit float.
            </summary>
        </member>
        <member name="T:WebAssembly.OpCodeCharacteristicsAttribute">
            <summary>
            Describes the characteristics of an <see cref="T:WebAssembly.OpCode"/>.
            </summary>
        </member>
        <member name="P:WebAssembly.OpCodeCharacteristicsAttribute.Name">
            <summary>
            The standardized name for the opcode.  Cannot be null.
            </summary>
        </member>
        <member name="M:WebAssembly.OpCodeCharacteristicsAttribute.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:WebAssembly.OpCodeCharacteristicsAttribute"/> with the provided characteristics.
            </summary>
            <param name="name">The standardized name for the opcode.  Cannot be null.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> cannot be null.</exception>
        </member>
        <member name="M:WebAssembly.Reader.Dispose">
            <summary>
            Releases unmanaged resources associated with this instance.
            </summary>
        </member>
        <member name="T:WebAssembly.ResizableLimits">
            <summary>
            A packed tuple that describes the limits of a <see cref="T:WebAssembly.Table"/> or memory.
            </summary>
        </member>
        <member name="F:WebAssembly.ResizableLimits.Flags.None">
            <summary>
            No flags are set.
            </summary>
        </member>
        <member name="F:WebAssembly.ResizableLimits.Flags.Maximum">
            <summary>
            Indicates whether the <see cref="P:WebAssembly.ResizableLimits.Maximum"/> field is present.
            </summary>
        </member>
        <member name="P:WebAssembly.ResizableLimits.Minimum">
            <summary>
            Initial length (in units of table elements or 65,536-byte pages).
            </summary>
        </member>
        <member name="P:WebAssembly.ResizableLimits.Maximum">
            <summary>
            Maximum length (in units of table elements or 65,536-byte pages).
            </summary>
        </member>
        <member name="M:WebAssembly.ResizableLimits.#ctor">
            <summary>
            Creates a new <see cref="T:WebAssembly.ResizableLimits"/> instance.
            </summary>
        </member>
        <member name="M:WebAssembly.ResizableLimits.#ctor(System.UInt32,System.Nullable{System.UInt32})">
            <summary>
            Creates a new <see cref="T:WebAssembly.ResizableLimits"/> instance with the provided <see cref="P:WebAssembly.ResizableLimits.Minimum"/> and <see cref="P:WebAssembly.ResizableLimits.Maximum"/> values.
            </summary>
            <param name="minimum">Initial length (in units of table elements or 65,536-byte pages).</param>
            <param name="maximum">Maximum length (in units of table elements or 65,536-byte pages).</param>
        </member>
        <member name="M:WebAssembly.ResizableLimits.#ctor(WebAssembly.Reader)">
            <summary>
            Creates a new <see cref="T:WebAssembly.ResizableLimits"/> from a binary data stream.
            </summary>
            <param name="reader">The source of data.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="reader"/> cannot be null.</exception>
        </member>
        <member name="M:WebAssembly.ResizableLimits.ToString">
            <summary>
            Expresses the value of this instance as a string.
            </summary>
            <returns>A string representation of this instance.</returns>
        </member>
        <member name="T:WebAssembly.Runtime.InstanceCreator`1">
            <summary>
            Creates a new instance of a compiled WebAssembly module.
            </summary>
            <typeparam name="TExports">The type of the exports object.</typeparam>
            <param name="imports">Run-time imports.</param>
            <returns>The instance.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="imports" /> cannot be null.</exception>
        </member>
        <member name="T:WebAssembly.Runtime.Compile">
            <summary>
            Provides compilation functionality.  Use <see cref="T:WebAssembly.Module"/> for robust inspection and modification capability.
            </summary>
        </member>
        <member name="M:WebAssembly.Runtime.Compile.FromBinary``1(System.String)">
            <summary>
            Uses streaming compilation to create an executable <see cref="T:WebAssembly.Instance`1"/> from a binary WebAssembly source.
            </summary>
            <param name="path">The path to the file that contains a WebAssembly binary stream.</param>
            <returns>The module.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> cannot be null.</exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="path"/> is an empty string (""), contains only white space, or contains one or more invalid characters; or,
            <paramref name="path"/> refers to a non-file device, such as "con:", "com1:", "lpt1:", etc. in an NTFS environment.
            </exception>
            <exception cref="T:System.NotSupportedException"><paramref name="path"/> refers to a non-file device, such as "con:", "com1:", "lpt1:", etc. in a non-NTFS environment.</exception>
            <exception cref="T:System.IO.FileNotFoundException">The file indicated by <paramref name="path"/> could not be found.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified <paramref name="path"/> is invalid, such as being on an unmapped drive.</exception>
            <exception cref="T:System.IO.PathTooLongException">
            The specified path, file name, or both exceed the system-defined maximum length.
            For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
            <exception cref="T:WebAssembly.ModuleLoadException">An error was encountered while reading the WebAssembly file.</exception>
        </member>
        <member name="M:WebAssembly.Runtime.Compile.FromBinary``1(System.String,WebAssembly.Runtime.CompilerConfiguration)">
            <summary>
            Uses streaming compilation to create an executable <see cref="T:WebAssembly.Instance`1"/> from a binary WebAssembly source.
            </summary>
            <param name="path">The path to the file that contains a WebAssembly binary stream.</param>
            <param name="configuration">Configures the compiler.</param>
            <returns>The module.</returns>
            <exception cref="T:System.ArgumentNullException">No parameters can be null.</exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="path"/> is an empty string (""), contains only white space, or contains one or more invalid characters; or,
            <paramref name="path"/> refers to a non-file device, such as "con:", "com1:", "lpt1:", etc. in an NTFS environment.
            </exception>
            <exception cref="T:System.NotSupportedException"><paramref name="path"/> refers to a non-file device, such as "con:", "com1:", "lpt1:", etc. in a non-NTFS environment.</exception>
            <exception cref="T:System.IO.FileNotFoundException">The file indicated by <paramref name="path"/> could not be found.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified <paramref name="path"/> is invalid, such as being on an unmapped drive.</exception>
            <exception cref="T:System.IO.PathTooLongException">
            The specified path, file name, or both exceed the system-defined maximum length.
            For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
            <exception cref="T:WebAssembly.ModuleLoadException">An error was encountered while reading the WebAssembly file.</exception>
        </member>
        <member name="M:WebAssembly.Runtime.Compile.FromBinary``1(System.IO.Stream)">
            <summary>
            Uses streaming compilation to create an executable <see cref="T:WebAssembly.Instance`1"/> from a binary WebAssembly source.
            </summary>
            <param name="input">The source of data.  The stream is left open after reading is complete.</param>
            <returns>A function that creates instances on demand.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="input"/> cannot be null.</exception>
        </member>
        <member name="M:WebAssembly.Runtime.Compile.FromBinary``1(System.IO.Stream,WebAssembly.Runtime.CompilerConfiguration)">
            <summary>
            Uses streaming compilation to create an executable <see cref="T:WebAssembly.Instance`1"/> from a binary WebAssembly source.
            </summary>
            <param name="input">The source of data.  The stream is left open after reading is complete.</param>
            <param name="configuration">Configures the compiler.</param>
            <returns>A function that creates instances on demand.</returns>
            <exception cref="T:System.ArgumentNullException">No parameters can be null.</exception>
        </member>
        <member name="T:WebAssembly.Runtime.CompilerConfiguration">
            <summary>
            Configures the WebAssembly compiler.
            </summary>
        </member>
        <member name="M:WebAssembly.Runtime.CompilerConfiguration.#ctor">
            <summary>
            Creates a new <see cref="T:WebAssembly.Runtime.CompilerConfiguration"/> instance with default properties.
            </summary>
        </member>
        <member name="P:WebAssembly.Runtime.CompilerConfiguration.GetDelegateForType">
            <summary>
            A function that returns a generic delegate for the number of parameters and returns, used for imports.
            The default implementation is <see cref="M:WebAssembly.Runtime.CompilerConfiguration.GetStandardDelegateForType(System.Int32,System.Int32)"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Runtime.CompilerConfiguration.GetStandardDelegateForType(System.Int32,System.Int32)">
            <summary>
            Returns the standard .NET delegate type, i.e. <see cref="T:System.Func`2"/>/<see cref="T:System.Action"/> or their peers, for the provided parameter and return count.
            </summary>
            <param name="parameters">The number of parameters; if not 0 through 16 (inclusive), null is returned.</param>
            <param name="returns">The number of returns; if no 0 or 1, null is returned.</param>
            <returns>One of the <see cref="T:System.Func`2"/>/<see cref="T:System.Action"/> variations,
            or null if no variation exists for the <paramref name="parameters"/>/<paramref name="returns"/> combination.</returns>
            <remarks>This can help build custom <see cref="P:WebAssembly.Runtime.CompilerConfiguration.GetDelegateForType"/> solutions by covering common cases.</remarks>
        </member>
        <member name="T:WebAssembly.Runtime.GetDelegateForTypeCallback">
            <summary>
            Provides a generic delegate type accepting the number of provided parameters and returns.
            </summary>
            <param name="parameters">The count of parameters.</param>
            <param name="returns">The count of returns.</param>
            <returns>
            A generic delegate or null if one is not available--this will lead to a <see cref="T:WebAssembly.Runtime.MissingDelegateTypesException"/> with the list of all misses.
            Typically, variants of <see cref="T:System.Func`2"/>/<see cref="T:System.Action"/> are used, but these don't cover every possibility.
            If more than 16 parameters are needed, a custom delegate type must be created.</returns>
            <remarks><see cref="M:WebAssembly.Runtime.CompilerConfiguration.GetStandardDelegateForType(System.Int32,System.Int32)"/> can be combined with custom solutions to handle common cases.</remarks>
        </member>
        <member name="T:WebAssembly.Runtime.CompilerException">
            <summary>
            Describes an error that occurred during the compilation process.
            </summary>
        </member>
        <member name="M:WebAssembly.Runtime.CompilerException.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:WebAssembly.Runtime.CompilerException"/> instance with the provided message.
            </summary>
            <param name="message">Becomes <see cref="P:System.Exception.Message"/>.</param>
        </member>
        <member name="M:WebAssembly.Runtime.CompilerException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new <see cref="T:WebAssembly.Runtime.CompilerException"/> instance with the provided message and inner exception.
            </summary>
            <param name="message">Becomes <see cref="P:System.Exception.Message"/>.</param>
            <param name="innerException">Becomes <see cref="P:System.Exception.InnerException"/>.</param>
        </member>
        <member name="T:WebAssembly.Runtime.FunctionImport">
            <summary>
            Indicates a method to use for a WebAssembly function import.
            </summary>
        </member>
        <member name="P:WebAssembly.Runtime.FunctionImport.Kind">
            <summary>
            Always <see cref="F:WebAssembly.ExternalKind.Function"/>.
            </summary>
        </member>
        <member name="P:WebAssembly.Runtime.FunctionImport.Method">
            <summary>
            The method to use for the import.
            </summary>
        </member>
        <member name="M:WebAssembly.Runtime.FunctionImport.#ctor(System.Delegate)">
            <summary>
            Creates a new <see cref="T:WebAssembly.Runtime.FunctionImport"/> instance with the provided <see cref="T:System.Delegate"/>.
            </summary>
            <param name="del">The delegate to use for the import.</param>
            <exception cref="T:System.ArgumentNullException">No parameters can be null.</exception>
            <exception cref="T:System.ArgumentException">A parameter or return type is not compatible with WebAssembly.</exception>
        </member>
        <member name="T:WebAssembly.Runtime.FunctionTable">
            <summary>
            An array-like structure representing a table import/export, which for the initial specification of WebAssembly is always a function list.
            Its behavior mimics the JavaScript version, where the import object is actually modified by the instantiation process.
            </summary>
        </member>
        <member name="P:WebAssembly.Runtime.FunctionTable.Element">
            <summary>
            Always <see cref="F:WebAssembly.ElementType.FunctionReference"/>.
            </summary>
        </member>
        <member name="P:WebAssembly.Runtime.FunctionTable.Initial">
            <summary>
            The initial number of elements.
            </summary>
        </member>
        <member name="P:WebAssembly.Runtime.FunctionTable.Maximum">
            <summary>
            The maximum number of elements the table is allowed to grow to.
            </summary>
        </member>
        <member name="M:WebAssembly.Runtime.FunctionTable.#ctor(System.UInt32)">
            <summary>
            Creates a new <see cref="T:WebAssembly.Runtime.FunctionTable"/> with the provided initial size with no maximum.
            </summary>
            <param name="initial">The initial number of elements.</param>
        </member>
        <member name="M:WebAssembly.Runtime.FunctionTable.#ctor(System.UInt32,System.Nullable{System.UInt32})">
            <summary>
            Creates a new <see cref="T:WebAssembly.Runtime.FunctionTable"/> with the provided initial and maximum size.
            </summary>
            <param name="initial">The initial number of elements.</param>
            <param name="maximum">The maximum number of elements the table is allowed to grow to.</param>
            <exception cref="T:System.ArgumentException"><paramref name="initial"/> cannot exceed <paramref name="maximum"/>.</exception>
        </member>
        <member name="P:WebAssembly.Runtime.FunctionTable.Item(System.Int32)">
            <summary>
            Gets or sets the delegate at the indicated index.  The first time a delegate is provided, it locks in the type for any future reassignments.
            </summary>
            <param name="index">The index within the table to target.</param>
            <returns>The delegate at that index, which may be null.</returns>
            <exception cref="T:System.IndexOutOfRangeException"><paramref name="index"/> does not fall within the range of the table.</exception>
            <exception cref="T:System.ArgumentException">The delegate is expected to be of a different type than supplied.</exception>
            <remarks>Delegate types set by the compiler come from the provided (or default) <see cref="T:WebAssembly.Runtime.CompilerConfiguration"/>.</remarks>
        </member>
        <member name="P:WebAssembly.Runtime.FunctionTable.Length">
            <summary>
            Gets the current size of the table.
            </summary>
        </member>
        <member name="M:WebAssembly.Runtime.FunctionTable.Grow(System.UInt32)">
            <summary>
            Increases the size of the instance by a specified number of elements.
            </summary>
            <param name="number">The number of elements you want to grow the table by.</param>
            <returns>The previous length of the table.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="number"/>, when added to <see cref="P:WebAssembly.Runtime.FunctionTable.Length"/>, would exceed the defined <see cref="P:WebAssembly.Runtime.FunctionTable.Maximum"/>.
            </exception>
            <exception cref="T:System.OverflowException"><paramref name="number"/> added to the current size exceeds <see cref="F:System.Int32.MaxValue"/>.</exception>
        </member>
        <member name="T:WebAssembly.Runtime.GlobalImport">
            <summary>
            Indicates the method(s) to use for a WebAssembly global import.
            </summary>
        </member>
        <member name="P:WebAssembly.Runtime.GlobalImport.Kind">
            <summary>
            Always <see cref="F:WebAssembly.ExternalKind.Global"/>.
            </summary>
        </member>
        <member name="P:WebAssembly.Runtime.GlobalImport.Getter">
            <summary>
            The method to use for read requests.
            </summary>
        </member>
        <member name="P:WebAssembly.Runtime.GlobalImport.Setter">
            <summary>
            The method to use for write requests, or null (the default).
            </summary>
        </member>
        <member name="M:WebAssembly.Runtime.GlobalImport.#ctor(System.Func{System.Int32},System.Action{System.Int32})">
            <summary>
            Creates a new <see cref="T:WebAssembly.Runtime.GlobalImport"/> instance with the provided delegates.
            </summary>
            <param name="getter">The method to use for read requests.</param>
            <param name="setter">The method to use for write requests, or null (the default).</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="getter"/> cannot be null.</exception>
        </member>
        <member name="M:WebAssembly.Runtime.GlobalImport.#ctor(System.Func{System.UInt32},System.Action{System.UInt32})">
            <summary>
            Creates a new <see cref="T:WebAssembly.Runtime.GlobalImport"/> instance with the provided delegates.
            </summary>
            <param name="getter">The method to use for read requests.</param>
            <param name="setter">The method to use for write requests, or null (the default).</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="getter"/> cannot be null.</exception>
        </member>
        <member name="M:WebAssembly.Runtime.GlobalImport.#ctor(System.Func{System.Int64},System.Action{System.Int64})">
            <summary>
            Creates a new <see cref="T:WebAssembly.Runtime.GlobalImport"/> instance with the provided delegates.
            </summary>
            <param name="getter">The method to use for read requests.</param>
            <param name="setter">The method to use for write requests, or null (the default).</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="getter"/> cannot be null.</exception>
        </member>
        <member name="M:WebAssembly.Runtime.GlobalImport.#ctor(System.Func{System.UInt64},System.Action{System.UInt64})">
            <summary>
            Creates a new <see cref="T:WebAssembly.Runtime.GlobalImport"/> instance with the provided delegates.
            </summary>
            <param name="getter">The method to use for read requests.</param>
            <param name="setter">The method to use for write requests, or null (the default).</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="getter"/> cannot be null.</exception>
        </member>
        <member name="M:WebAssembly.Runtime.GlobalImport.#ctor(System.Func{System.Single},System.Action{System.Single})">
            <summary>
            Creates a new <see cref="T:WebAssembly.Runtime.GlobalImport"/> instance with the provided delegates.
            </summary>
            <param name="getter">The method to use for read requests.</param>
            <param name="setter">The method to use for write requests, or null (the default).</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="getter"/> cannot be null.</exception>
        </member>
        <member name="M:WebAssembly.Runtime.GlobalImport.#ctor(System.Func{System.Double},System.Action{System.Double})">
            <summary>
            Creates a new <see cref="T:WebAssembly.Runtime.GlobalImport"/> instance with the provided delegates.
            </summary>
            <param name="getter">The method to use for read requests.</param>
            <param name="setter">The method to use for write requests, or null (the default).</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="getter"/> cannot be null.</exception>
        </member>
        <member name="T:WebAssembly.Runtime.Helpers">
            <summary>
            Helper logic for compiled WebAssembly modules.  Do not directly use these methods in your code.
            </summary>
        </member>
        <member name="M:WebAssembly.Runtime.Helpers.FindImport``1(System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IDictionary{System.String,WebAssembly.Runtime.RuntimeImport}},System.String,System.String)">
            <summary>
            Do not use this method directly in your code.
            </summary>
        </member>
        <member name="T:WebAssembly.Runtime.ImportDictionary">
            <summary>
            A helper dictionary to make it easier to gather imports for the compiler.
            </summary>
        </member>
        <member name="M:WebAssembly.Runtime.ImportDictionary.Add(System.String,System.String,WebAssembly.Runtime.RuntimeImport)">
            <summary>
            Adds a runtime import with the provided module and field names.
            </summary>
            <param name="moduleName">The first part of the two-part name.</param>
            <param name="fieldName">The second part of the two-part name.</param>
            <param name="value">The import to add.</param>
        </member>
        <member name="T:WebAssembly.Runtime.MemoryAccessOutOfRangeException">
            <summary>
            Describes an exception where an out-of-range memory access was attempted.
            </summary>
        </member>
        <member name="M:WebAssembly.Runtime.MemoryAccessOutOfRangeException.#ctor(System.UInt32,System.UInt32)">
            <summary>
            Creates a new <see cref="T:WebAssembly.Runtime.MemoryAccessOutOfRangeException"/> instance with the provided offset and length.
            </summary>
            <param name="offset">The memory location that was attempted to be accessed.</param>
            <param name="length">The amount of memory to be accessed.</param>
        </member>
        <member name="P:WebAssembly.Runtime.MemoryAccessOutOfRangeException.Offset">
            <summary>
            The memory location that was attempted to be accessed.
            </summary>
        </member>
        <member name="P:WebAssembly.Runtime.MemoryAccessOutOfRangeException.Length">
            <summary>
            The amount of memory to be accessed.
            </summary>
        </member>
        <member name="T:WebAssembly.Runtime.MemoryImport">
            <summary>
            Indicates a memory source to use for a WebAssembly memory import.
            </summary>
        </member>
        <member name="P:WebAssembly.Runtime.MemoryImport.Kind">
            <summary>
            Always <see cref="F:WebAssembly.ExternalKind.Function"/>.
            </summary>
        </member>
        <member name="P:WebAssembly.Runtime.MemoryImport.Method">
            <summary>
            The method to use for the import.
            </summary>
        </member>
        <member name="M:WebAssembly.Runtime.MemoryImport.#ctor(System.Func{WebAssembly.Runtime.UnmanagedMemory})">
            <summary>
            Creates a new <see cref="T:WebAssembly.Runtime.MemoryImport"/> instance with the provided <see cref="T:WebAssembly.Runtime.UnmanagedMemory"/>.
            </summary>
            <param name="method">A function to provide the memory to use for the import.</param>
            <exception cref="T:System.ArgumentNullException">No parameters can be null.</exception>
        </member>
        <member name="T:WebAssembly.Runtime.MissingDelegateTypesException">
            <summary>
            Thrown when <see cref="P:WebAssembly.Runtime.CompilerConfiguration.GetDelegateForType"/> fails to find a delegate type for one or more imports.
            </summary>
        </member>
        <member name="P:WebAssembly.Runtime.MissingDelegateTypesException.MissingDelegateTypes">
            <summary>
            The characteristics of required delegates that were not found.
            </summary>
        </member>
        <member name="T:WebAssembly.Runtime.MissingDelegateType">
            <summary>
            Describes a delegate that was required but was not provided.
            </summary>
        </member>
        <member name="P:WebAssembly.Runtime.MissingDelegateType.Module">
            <summary>
            The module portion of the name.
            </summary>
        </member>
        <member name="P:WebAssembly.Runtime.MissingDelegateType.Field">
            <summary>
            The field portion of the name.
            </summary>
        </member>
        <member name="P:WebAssembly.Runtime.MissingDelegateType.Parameters">
            <summary>
            The number of parameters needed for the delegate.
            </summary>
        </member>
        <member name="P:WebAssembly.Runtime.MissingDelegateType.Returns">
            <summary>
            The number of returns needed for the delegate.
            </summary>
        </member>
        <member name="M:WebAssembly.Runtime.MissingDelegateType.ToString">
            <summary>
            Expresses the value of this instance as a string.
            </summary>
            <returns>A string representation of this instance.</returns>
        </member>
        <member name="T:WebAssembly.Runtime.OpCodeCompilationException">
            <summary>
            Used by the compiler to describe a problem encountered while compiling an <see cref="P:WebAssembly.Runtime.OpCodeCompilationException.OpCode"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Runtime.OpCodeCompilationException.#ctor(WebAssembly.OpCode,System.String)">
            <summary>
            Creates a new <see cref="T:WebAssembly.Runtime.OpCodeCompilationException"/> with the provided parameters.
            </summary>
            <param name="opCode">The operation attempted.</param>
            <param name="message">An explanation of the problem, concatenated with <paramref name="opCode"/> and passed to the base as the message.</param>
        </member>
        <member name="P:WebAssembly.Runtime.OpCodeCompilationException.OpCode">
            <summary>
            The operation attempted.
            </summary>
        </member>
        <member name="T:WebAssembly.Runtime.RuntimeException">
            <summary>
            Describes an error encountered during execution of a compiled WebAssembly.
            </summary>
        </member>
        <member name="M:WebAssembly.Runtime.RuntimeException.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:WebAssembly.Runtime.RuntimeException"/> with the provided message.
            </summary>
            <param name="message">Becomes <see cref="P:System.Exception.Message"/>.</param>
        </member>
        <member name="T:WebAssembly.Runtime.RuntimeImport">
            <summary>
            Functionality to integrate into a compiled WebAssembly instance.
            </summary>
        </member>
        <member name="P:WebAssembly.Runtime.RuntimeImport.Kind">
            <summary>
            The type of import.
            </summary>
        </member>
        <member name="T:WebAssembly.Runtime.StackParameterMismatchException">
            <summary>
            Used by the compiler to indicate that the value types being fed as parameters to an operation that requires them to match, do not match.
            </summary>
        </member>
        <member name="M:WebAssembly.Runtime.StackParameterMismatchException.#ctor(WebAssembly.OpCode,WebAssembly.WebAssemblyValueType,WebAssembly.WebAssemblyValueType)">
            <summary>
            Creates a new <see cref="T:WebAssembly.Runtime.StackParameterMismatchException"/> with the provided parameters.
            </summary>
            <param name="opCode">The operation attempted.</param>
            <param name="first">The first parameter type.</param>
            <param name="second">The second parameter type.</param>
        </member>
        <member name="P:WebAssembly.Runtime.StackParameterMismatchException.First">
            <summary>
            The first parameter type.
            </summary>
        </member>
        <member name="P:WebAssembly.Runtime.StackParameterMismatchException.Second">
            <summary>
            The second parameter type.
            </summary>
        </member>
        <member name="T:WebAssembly.Runtime.StackSizeIncorrectException">
            <summary>
            Used by the compiler to indicate the stack was the wrong size to execute an operation.
            </summary>
        </member>
        <member name="M:WebAssembly.Runtime.StackSizeIncorrectException.#ctor(WebAssembly.OpCode,System.Int32,System.Int32)">
            <summary>
            Creates a new <see cref="T:WebAssembly.Runtime.StackSizeIncorrectException"/> with the provided parameters.
            </summary>
            <param name="opCode">The operation attempted.</param>
            <param name="expected">The expected stack height.</param>
            <param name="actual">The actual stack height at the time the operation was attempted.</param>
        </member>
        <member name="P:WebAssembly.Runtime.StackSizeIncorrectException.Expected">
            <summary>
            The expected stack height.
            </summary>
        </member>
        <member name="P:WebAssembly.Runtime.StackSizeIncorrectException.Actual">
            <summary>
            The actual stack height at the time the operation was attempted.
            </summary>
        </member>
        <member name="T:WebAssembly.Runtime.StackTooSmallException">
            <summary>
            Used by the compiler to indicate the stack was too small to execute an operation.
            </summary>
        </member>
        <member name="M:WebAssembly.Runtime.StackTooSmallException.#ctor(WebAssembly.OpCode,System.Int32,System.Int32)">
            <summary>
            Creates a new <see cref="T:WebAssembly.Runtime.StackTooSmallException"/> with the provided parameters.
            </summary>
            <param name="opCode">The operation attempted.</param>
            <param name="minimum">The minimum acceptable stack height.</param>
            <param name="actual">The actual stack height at the time the operation was attempted.</param>
        </member>
        <member name="P:WebAssembly.Runtime.StackTooSmallException.Minimum">
            <summary>
            The minimum acceptable stack height.
            </summary>
        </member>
        <member name="P:WebAssembly.Runtime.StackTooSmallException.Actual">
            <summary>
            The actual stack height at the time the operation was attempted.
            </summary>
        </member>
        <member name="T:WebAssembly.Runtime.StackTypeInvalidException">
            <summary>
            Used by the compiler to indicate that the item at the top of the stack is invalid for an operation.
            </summary>
        </member>
        <member name="M:WebAssembly.Runtime.StackTypeInvalidException.#ctor(WebAssembly.OpCode,WebAssembly.WebAssemblyValueType,WebAssembly.WebAssemblyValueType)">
            <summary>
            Creates a new <see cref="T:WebAssembly.Runtime.StackTypeInvalidException"/> with the provided parameters.
            </summary>
            <param name="opCode">The operation attempted.</param>
            <param name="expected">The expected value type.</param>
            <param name="actual">The actual value type.</param>
        </member>
        <member name="P:WebAssembly.Runtime.StackTypeInvalidException.Expected">
            <summary>
            The expected value type.
            </summary>
        </member>
        <member name="P:WebAssembly.Runtime.StackTypeInvalidException.Actual">
            <summary>
            The actual value type.
            </summary>
        </member>
        <member name="T:WebAssembly.Runtime.TableImport">
            <summary>
            The base class for all table imports, which for the initial specification, is always <see cref="T:WebAssembly.Runtime.FunctionTable"/>.
            </summary>
        </member>
        <member name="P:WebAssembly.Runtime.TableImport.Kind">
            <summary>
            Always <see cref="F:WebAssembly.ExternalKind.Table"/>.
            </summary>
        </member>
        <member name="P:WebAssembly.Runtime.TableImport.Element">
            <summary>
            The type of table being imported.
            </summary>
        </member>
        <member name="T:WebAssembly.Runtime.UnmanagedMemory">
            <summary>
            Implements a WebAssembly linear memory resource using unmanaged memory.
            </summary>
        </member>
        <member name="T:WebAssembly.Runtime.UnmanagedMemory.ZeroMemoryDelegate">
            <summary>
            Sets a <paramref name="length"/> of bytes to zero at a <paramref name="destination"/> memory location.
            </summary>
            <param name="destination">The write target memory location.</param>
            <param name="length">The count of bytes to be copied.</param>
        </member>
        <member name="F:WebAssembly.Runtime.UnmanagedMemory.ZeroMemory">
            <summary>
            Sets a length of bytes to the given value at a destination memory location.
            See <see cref="T:WebAssembly.Runtime.UnmanagedMemory.ZeroMemoryDelegate"/> for details.
            </summary>
        </member>
        <member name="M:WebAssembly.Runtime.UnmanagedMemory.#ctor(System.UInt32,System.Nullable{System.UInt32})">
            <summary>
            Creates a new <see cref="T:WebAssembly.Runtime.UnmanagedMemory"/> instance with the provided parameters.
            </summary>
            <param name="minimum">The initial size of memory in <see cref="F:WebAssembly.Memory.PageSize"/> pages.</param>
            <param name="maximum">The maximum size of memory in <see cref="F:WebAssembly.Memory.PageSize"/> pages.</param>
        </member>
        <member name="P:WebAssembly.Runtime.UnmanagedMemory.Minimum">
            <summary>
            The initial size of memory in <see cref="F:WebAssembly.Memory.PageSize"/> pages.
            </summary>
        </member>
        <member name="P:WebAssembly.Runtime.UnmanagedMemory.Maximum">
            <summary>
            The maximum size of memory in <see cref="F:WebAssembly.Memory.PageSize"/> pages.
            </summary>
        </member>
        <member name="P:WebAssembly.Runtime.UnmanagedMemory.Current">
            <summary>
            The currently allocated size of memory in <see cref="F:WebAssembly.Memory.PageSize"/> pages.
            </summary>
        </member>
        <member name="P:WebAssembly.Runtime.UnmanagedMemory.Start">
            <summary>
            The start of linear memory, or <see cref="F:System.IntPtr.Zero"/> if not used.
            </summary>
        </member>
        <member name="P:WebAssembly.Runtime.UnmanagedMemory.Size">
            <summary>
            The current amount of memory allocated.
            </summary>
        </member>
        <member name="M:WebAssembly.Runtime.UnmanagedMemory.Grow(System.UInt32)">
            <summary>
            Grows memory by <paramref name="delta"/> multiplied by <see cref="F:WebAssembly.Memory.PageSize"/>.
            </summary>
            <param name="delta">The amount of memory pages to allocate.</param>
            <returns>The previous <see cref="P:WebAssembly.Runtime.UnmanagedMemory.Current"/> size value, or -1 (unchecked wrap to unsigned 32-bit integer) in the event of a failure.</returns>
        </member>
        <member name="M:WebAssembly.Runtime.UnmanagedMemory.Finalize">
            <summary>
            Calls <see cref="M:WebAssembly.Runtime.UnmanagedMemory.Dispose"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Runtime.UnmanagedMemory.Dispose">
            <summary>
            Releases unmanaged resources associated with this instance.
            </summary>
        </member>
        <member name="T:WebAssembly.Runtime.UnreachableException">
            <summary>
            Indicates an <see cref="T:WebAssembly.Instructions.Unreachable"/> instruction was reached.
            </summary>
        </member>
        <member name="M:WebAssembly.Runtime.UnreachableException.#ctor">
            <summary>
            Creates a new <see cref="T:WebAssembly.Runtime.UnreachableException"/> with a default message: Unreachable instruction was encountered.
            </summary>
        </member>
        <member name="T:WebAssembly.Section">
            <summary>
            The standard section identifiers.
            </summary>
        </member>
        <member name="F:WebAssembly.Section.None">
            <summary>
            Indicates a non-standard custom section.
            </summary>
        </member>
        <member name="F:WebAssembly.Section.Type">
            <summary>
            Function signature declarations.
            </summary>
        </member>
        <member name="F:WebAssembly.Section.Import">
            <summary>
            Import declarations.
            </summary>
        </member>
        <member name="F:WebAssembly.Section.Function">
            <summary>
            Function declarations.
            </summary>
        </member>
        <member name="F:WebAssembly.Section.Table">
            <summary>
            Indirect function table and other tables.
            </summary>
        </member>
        <member name="F:WebAssembly.Section.Memory">
            <summary>
            Memory attributes.
            </summary>
        </member>
        <member name="F:WebAssembly.Section.Global">
            <summary>
            Global declarations.
            </summary>
        </member>
        <member name="F:WebAssembly.Section.Export">
            <summary>
            Exports.
            </summary>
        </member>
        <member name="F:WebAssembly.Section.Start">
            <summary>
            Start function declaration.
            </summary>
        </member>
        <member name="F:WebAssembly.Section.Element">
            <summary>
            Elements section.
            </summary>
        </member>
        <member name="F:WebAssembly.Section.Code">
            <summary>
            Function bodies (code).
            </summary>
        </member>
        <member name="F:WebAssembly.Section.Data">
            <summary>
            Data segments.
            </summary>
        </member>
        <member name="T:WebAssembly.Table">
            <summary>
            Desribes a table within the assembly.
            </summary>
        </member>
        <member name="P:WebAssembly.Table.ElementType">
            <summary>
            The type of elements.
            </summary>
        </member>
        <member name="P:WebAssembly.Table.ResizableLimits">
            <summary>
            A packed tuple that describes the limits of the table.
            </summary>
        </member>
        <member name="M:WebAssembly.Table.#ctor">
            <summary>
            Creates a new <see cref="T:WebAssembly.Table"/> instance.
            </summary>
        </member>
        <member name="M:WebAssembly.Table.#ctor(WebAssembly.Reader)">
            <summary>
            Creates a new <see cref="T:WebAssembly.Table"/> from a binary data stream.
            </summary>
            <param name="reader">The source of data.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="reader"/> cannot be null.</exception>
        </member>
        <member name="M:WebAssembly.Table.ToString">
            <summary>
            Expresses the value of this instance as a string.
            </summary>
            <returns>A string representation of this instance.</returns>
        </member>
        <member name="T:WebAssembly.WebAssemblyType">
            <summary>
            Describes the signature of a function.
            </summary>
        </member>
        <member name="P:WebAssembly.WebAssemblyType.Form">
            <summary>
            The type of function.  The only accepted value in the initial binary format is <see cref="F:WebAssembly.FunctionType.Function"/>, which is the default.
            </summary>
        </member>
        <member name="P:WebAssembly.WebAssemblyType.Parameters">
            <summary>
            Parameters to the function.
            </summary>
            <exception cref="T:System.ArgumentNullException">Value cannot be set to null.</exception>
        </member>
        <member name="P:WebAssembly.WebAssemblyType.Returns">
            <summary>
            Return types to the function.  For the initial binary format, a maximum of 1 is allowed.
            </summary>
            <exception cref="T:System.ArgumentNullException">Value cannot be set to null.</exception>
        </member>
        <member name="M:WebAssembly.WebAssemblyType.#ctor">
            <summary>
            Creates a new <see cref="T:WebAssembly.WebAssemblyType"/> instance.
            </summary>
        </member>
        <member name="M:WebAssembly.WebAssemblyType.ToString">
            <summary>
            Expresses the value of this instance as a string.
            </summary>
            <returns>A string representation of this instance.</returns>
        </member>
        <member name="M:WebAssembly.WebAssemblyType.GetHashCode">
            <summary>
            Creates a hash code based on the parameters and returns of this instance.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:WebAssembly.WebAssemblyType.Equals(System.Object)">
            <summary>
            Compares the values of this instance for equality with those of another.
            </summary>
            <param name="obj">The other instance to compare against.</param>
            <returns>True if the two instances have the same values, otherwise false.</returns>
        </member>
        <member name="M:WebAssembly.WebAssemblyType.Equals(WebAssembly.WebAssemblyType)">
            <summary>
            Compares the values of this instance for equality with those of another.
            </summary>
            <param name="other">The other instance to compare against.</param>
            <returns>True if the two instances have the same values, otherwise false.</returns>
        </member>
        <member name="T:WebAssembly.WebAssemblyValueType">
            <summary>
            Types suitable when a value is expected.
            </summary>
        </member>
        <member name="F:WebAssembly.WebAssemblyValueType.Int32">
            <summary>
            32-bit integer value-type, equivalent to .NET's <see cref="T:System.Int32"/> and <see cref="T:System.UInt32"/>.
            </summary>
        </member>
        <member name="F:WebAssembly.WebAssemblyValueType.Int64">
            <summary>
            64-bit integer value-type, equivalent to .NET's <see cref="T:System.Int64"/> and <see cref="T:System.UInt64"/>.
            </summary>
        </member>
        <member name="F:WebAssembly.WebAssemblyValueType.Float32">
            <summary>
            32-bit floating point value-type, equivalent to .NET's <see cref="T:System.Single"/>.
            </summary>
        </member>
        <member name="F:WebAssembly.WebAssemblyValueType.Float64">
            <summary>
            64-bit floating point value-type, equivalent to .NET's <see cref="T:System.Double"/>.
            </summary>
        </member>
        <member name="M:WebAssembly.Writer.Dispose">
            <summary>
            Releases unmanaged resources associated with this instance.
            </summary>
        </member>
    </members>
</doc>
